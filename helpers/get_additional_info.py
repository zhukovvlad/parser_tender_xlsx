from .parse_contractor_row import parse_contractor_row # Эта зависимость импортирована, но не используется в данной функции
from .find_row_by_first_column import find_row_by_first_column

def get_additional_info(ws, contractor):
    """
    Извлекает структурированную дополнительную информацию о конкретном подрядчике
    из специального блока на листе Excel.

    Функция сначала ищет на листе строку, начинающуюся с текста
    "Дополнительная информация" (поиск в первой колонке). Если такая строка
    найдена, функция начинает считывать данные со следующей строки.
    Предполагается, что каждая последующая значащая строка в этом блоке
    содержит наименование поля информации во второй колонке (колонка B),
    а соответствующее значение для данного подрядчика — в колонке, указанной
    в словаре `contractor` по ключу "column_start".

    Сбор информации прекращается при обнаружении полностью пустой строки.
    Пустые строки "" в качестве значений заменяются на None.

    Args:
        ws (openpyxl.worksheet.worksheet.Worksheet): Объект рабочего листа Excel,
            из которого извлекаются данные.
        contractor (dict): Словарь, содержащий информацию о подрядчике.
            Обязательно должен содержать ключ "column_start" (int), указывающий
            номер начальной колонки данных для этого подрядчика в блоке
            дополнительной информации.

    Returns:
        dict: Словарь с дополнительной информацией о подрядчике.
              Ключами словаря являются наименования полей из второй колонки
              блока "Дополнительная информация", а значениями — соответствующие
              данные из колонки подрядчика. Если блок "Дополнительная информация"
              не найден или пуст, возвращается пустой словарь.

    Пример структуры извлекаемых данных:
    Если на листе Excel ниже строки "Дополнительная информация":
    - Ячейка B20: "Опыт работы (лет)"
    - Ячейка (20, contractor["column_start"]): 5
    - Ячейка B21: "Наличие сертификата ISO"
    - Ячейка (21, contractor["column_start"]): "Да"

    То функция вернет:
    {
        "Опыт работы (лет)": 5,
        "Наличие сертификата ISO": "Да"
    }
    """
    additional_info = {}
    target_text = "Дополнительная информация" # Текст для поиска заголовка блока

    # Находим строку, с которой начинается блок дополнительной информации
    start_row = find_row_by_first_column(ws, target_text)

    # Если блок не найден, возвращаем пустой словарь
    if not start_row:
        return additional_info

    start_row += 1  # Начинаем читать со следующей строки после заголовка
    contractor_column = contractor["column_start"] # Колонка данных для текущего подрядчика

    while True:
        # Проверяем, является ли текущая строка полностью пустой
        # ws[start_row] возвращает кортеж ячеек для данной строки
        if all(cell.value is None for cell in ws[start_row]):
            break  # Прерываем цикл, если строка полностью пустая

        # Получаем ключ из второй колонки (B)
        key_cell = ws.cell(row=start_row, column=2).value
        # Получаем значение из колонки подрядчика
        value_cell = ws.cell(row=start_row, column=contractor_column).value

        # Обрабатываем ключ: удаляем лишние пробелы, если ключ существует
        key = str(key_cell).strip() if key_cell else None
        # Обрабатываем значение: пустые строки и None считаем как None
        value = value_cell if value_cell not in [None, ""] else None

        # Если ключ существует, добавляем пару ключ-значение в результат
        # (значение может быть None)
        if key:
            additional_info[key] = value

        start_row += 1 # Переходим к следующей строке

    return additional_info