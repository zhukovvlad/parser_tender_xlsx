from typing import Dict, Any, List # –î–æ–±–∞–≤–ª–µ–Ω List –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞

from helpers.sanitize_text import sanitize_text

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç JSON –∫–ª—é—á–µ–π
from constants import (
    JSON_KEY_BASELINE_PROPOSAL, JSON_KEY_COMMENT_CONTRACTOR, JSON_KEY_COMMENT_ORGANIZER,
    JSON_KEY_CONTRACTOR_ACCREDITATION, JSON_KEY_CONTRACTOR_ADDITIONAL_INFO,
    JSON_KEY_CONTRACTOR_ADDRESS, JSON_KEY_CONTRACTOR_INN, JSON_KEY_CONTRACTOR_ITEMS,
    JSON_KEY_CONTRACTOR_POSITIONS, JSON_KEY_CONTRACTOR_SUMMARY, JSON_KEY_CONTRACTOR_TITLE,
    JSON_KEY_EXECUTOR, JSON_KEY_EXECUTOR_DATE, JSON_KEY_EXECUTOR_NAME, JSON_KEY_EXECUTOR_PHONE,
    JSON_KEY_INDIRECT_COSTS, JSON_KEY_JOB_TITLE, JSON_KEY_LOT_TITLE, JSON_KEY_LOTS,
    JSON_KEY_MATERIALS, JSON_KEY_ORGANIZER_QUANTITY_TOTAL_COST, JSON_KEY_PROPOSALS,
    JSON_KEY_QUANTITY, JSON_KEY_SUGGESTED_QUANTITY, JSON_KEY_TENDER_ADDRESS,
    JSON_KEY_TENDER_ID, JSON_KEY_TENDER_OBJECT, JSON_KEY_TENDER_TITLE, JSON_KEY_TOTAL,
    JSON_KEY_TOTAL_COST, JSON_KEY_TOTAL_COST_VAT, JSON_KEY_UNIT, JSON_KEY_UNIT_COST,
    JSON_KEY_VAT, JSON_KEY_WORKS, JSON_KEY_CHAPTER_NUMBER
)


def json_to_markdown(data: Dict[str, Any]) -> List[str]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç (—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä–æ–º –∏ –ø—Ä–æ—à–µ–¥—à–∏–π
    –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É) –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Markdown-–æ—Ç—á–µ—Ç–∞.

    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
    —Å –ø–æ–º–æ—â—å—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ `sanitize_text`. –û–Ω–∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
    –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
    –ø–æ–ª—è "is_chapter" –∏ "chapter_ref" (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã
    `annotate_structure_fields` –∏–∑ `postprocess.py`). –î–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤/–≥–ª–∞–≤
    –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞), –∞ –¥–ª—è
    –æ–±—ã—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π ‚Äî –ø–æ–ª–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è. –û–±—ã—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω—É–º–µ—Ä—É—é—Ç—Å—è
    –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.

    Args:
        data (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å Python, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏
            –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            `normalize_lots_json_structure` –∏ `annotate_structure_fields`).

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ Markdown, –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown (—Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–¥—É):
    -   –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ (H1, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç).
    -   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏, –∑–Ω–∞—á–µ–Ω–∏—è).
    -   –õ–æ—Ç—ã (H2, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è).
    -   –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (baseline_proposal):
        -   –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä.
        -   –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è –µ–µ –∏–º—è –∏ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
            (–∏–∑ `baseline_proposal['items']['summary']`).
    -   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ (H3 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞):
        -   –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã (`summary`) –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        -   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
        -   –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ (H4):
            -   –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–æ–º/–≥–ª–∞–≤–æ–π (`is_chapter: True`):
                -   –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ H5 —Å —ç–º–æ–¥–∑–∏ `üìò`, –Ω–æ–º–µ—Ä–æ–º —Ä–∞–∑–¥–µ–ª–∞,
                    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º.
                -   –í—ã–≤–æ–¥—è—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
            -   –û–±—ã—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ —Ä–∞–∑–¥–µ–ª—ã) –Ω—É–º–µ—Ä—É—é—Ç—Å—è –∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –∫–∞–∫ H6
                —Å –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π.
    -   –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–∏—â–∞—é—Ç—Å—è –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏.
    -   –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–≤–æ–¥—è—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ "0.00 —Ä—É–±."),
        –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ –≤ –ª–æ–≥–∏–∫–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ JSON.
    """
    md_lines: List[str] = []

    # --- 1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ ---
    tender_id_val = data.get(JSON_KEY_TENDER_ID, "N/A") # –ò—Å–ø–æ–ª—å–∑—É–µ–º _val –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    title_val = sanitize_text(data.get(JSON_KEY_TENDER_TITLE, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
    obj_val = sanitize_text(data.get(JSON_KEY_TENDER_OBJECT, ""))
    addr_val = sanitize_text(data.get(JSON_KEY_TENDER_ADDRESS, ""))

    md_lines.append(f"# –¢–µ–Ω–¥–µ—Ä ‚Ññ{tender_id_val} ¬´{title_val}¬ª\n") # –ò—Å–ø–æ–ª—å–∑—É–µ–º ¬´¬ª –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
    if obj_val:
        md_lines.append(f"**–û–±—ä–µ–∫—Ç:** {obj_val}  ") # –î–≤–∞ –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è markdown line break
    if addr_val:
        md_lines.append(f"**–ê–¥—Ä–µ—Å:** {addr_val}")
    if obj_val or addr_val:
        md_lines.append("  \n") # –Ø–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ
    md_lines.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞

    # --- 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ ---
    executor = data.get(JSON_KEY_EXECUTOR, {}) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    if executor: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å –Ω–µ –ø—É—Å—Ç–æ–π
        exec_name = sanitize_text(executor.get(JSON_KEY_EXECUTOR_NAME, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'))
        exec_phone = sanitize_text(executor.get(JSON_KEY_EXECUTOR_PHONE, '–ù–µ —É–∫–∞–∑–∞–Ω'))
        exec_date = sanitize_text(executor.get(JSON_KEY_EXECUTOR_DATE, '–ù–µ —É–∫–∞–∑–∞–Ω–∞'))
        md_lines.append(f"**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {exec_name}  ")
        md_lines.append(f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {exec_phone}  ")
        md_lines.append(f"**–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:** {exec_date}")
        md_lines.append("\n") # –Ø–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å

    # --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ—Ç–æ–≤ ---
    for lot_key_str, lot_data_dict in data.get(JSON_KEY_LOTS, {}).items(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
        lot_title_s = sanitize_text(lot_data_dict.get(JSON_KEY_LOT_TITLE, '–õ–æ—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        md_lines.append(f"\n---\n\n## {sanitize_text(lot_key_str).upper()}: {lot_title_s}\n")

        # -- 3.1 –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (Baseline Proposal) --
        baseline_prop = lot_data_dict.get(JSON_KEY_BASELINE_PROPOSAL, {})
        baseline_prop_title = sanitize_text(baseline_prop.get(JSON_KEY_CONTRACTOR_TITLE, ''))

        if baseline_prop_title == "–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            md_lines.append("**–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n")
        elif baseline_prop: # –ï—Å–ª–∏ baseline —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ –º–∞—Ä–∫–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
            md_lines.append(f"**–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (\"{baseline_prop_title}\"):**") # –ù–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            baseline_summary_items = baseline_prop.get(JSON_KEY_CONTRACTOR_ITEMS, {}).get(JSON_KEY_CONTRACTOR_SUMMARY, {})
            if baseline_summary_items:
                has_baseline_output = False
                for label_key, values_s_dict in baseline_summary_items.items():
                    if isinstance(values_s_dict, dict):
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤ –Ω–µ–º –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                        total_cost_s_data = values_s_dict.get(JSON_KEY_TOTAL_COST, {})
                        if isinstance(total_cost_s_data, dict) and any(v is not None for v in total_cost_s_data.values()):
                            has_baseline_output = True
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JOB_TITLE –∏–∑ summary_item_values –∫–∞–∫ –º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–∞–º –∫–ª—é—á
                            display_label = sanitize_text(values_s_dict.get(JSON_KEY_JOB_TITLE, label_key)).capitalize()
                            md_lines.append(f"- **{display_label}:**")
                            for k_cost, v_cost in total_cost_s_data.items():
                                if v_cost is not None:
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ None
                                    md_lines.append(f"  - {sanitize_text(k_cost).capitalize()}: {v_cost} —Ä—É–±.")
                if not has_baseline_output:
                    md_lines.append(f"  *–ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –¥–ª—è ¬´{baseline_prop_title}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.*")
                md_lines.append("") # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ baseline summary
            else:
                md_lines.append(f"  *–†–∞–∑–¥–µ–ª –∏—Ç–æ–≥–æ–≤ –¥–ª—è ¬´{baseline_prop_title}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n")
        
        # -- 3.2 –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ --
        for contractor_id_str, contractor_data in lot_data_dict.get(JSON_KEY_PROPOSALS, {}).items():
            contractor_name_s = sanitize_text(contractor_data.get(JSON_KEY_CONTRACTOR_TITLE, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥—Ä—è–¥—á–∏–∫"))
            md_lines.append(f"\n### –ü–æ–¥—Ä—è–¥—á–∏–∫: {contractor_name_s} ({sanitize_text(contractor_id_str)})\n")

            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è (–ò–ù–ù, –ê–¥—Ä–µ—Å, –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è) - –≤—ã–≤–æ–¥ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            details_md_parts = []
            if inn_s := sanitize_text(contractor_data.get(JSON_KEY_CONTRACTOR_INN)): details_md_parts.append(f"**–ò–ù–ù:** {inn_s}")
            if addr_s := sanitize_text(contractor_data.get(JSON_KEY_CONTRACTOR_ADDRESS)): details_md_parts.append(f"**–ê–¥—Ä–µ—Å:** {addr_s}")
            if accr_s := sanitize_text(contractor_data.get(JSON_KEY_CONTRACTOR_ACCREDITATION)): details_md_parts.append(f"**–°—Ç–∞—Ç—É—Å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏:** {accr_s}")
            if details_md_parts:
                md_lines.append("  ".join(details_md_parts) + "  \n")

            # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            additional_info_dict = contractor_data.get(JSON_KEY_CONTRACTOR_ADDITIONAL_INFO, {})
            if additional_info_dict:
                md_lines.append(f"**–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –æ—Ç {contractor_name_s}:**")
                for key_info, val_info in additional_info_dict.items():
                    md_lines.append(f"- {sanitize_text(key_info)}: {sanitize_text(val_info) if val_info is not None else '‚Äî'}")
                md_lines.append("") # –û—Ç—Å—Ç—É–ø

            # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞—à—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã–≤–æ–¥–∞)
            contractor_summary_dict = contractor_data.get(JSON_KEY_CONTRACTOR_ITEMS, {}).get(JSON_KEY_CONTRACTOR_SUMMARY, {})
            if contractor_summary_dict:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                summary_total_vat = contractor_summary_dict.get(JSON_KEY_TOTAL_COST_VAT, {}).get(JSON_KEY_TOTAL_COST, {})
                summary_vat_only = contractor_summary_dict.get(JSON_KEY_VAT, {}).get(JSON_KEY_TOTAL_COST, {})

                total_sum_val = sanitize_text(summary_total_vat.get(JSON_KEY_TOTAL, 0))
                vat_sum_val = sanitize_text(summary_vat_only.get(JSON_KEY_TOTAL, 0))
                md_lines.append(
                    f"–ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {contractor_name_s} –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ–≥–æ {total_sum_val} —Ä—É–±, "
                    f"–≤ —Ç–æ–º —á–∏—Å–ª–µ –ù–î–° {vat_sum_val} —Ä—É–±."
                )
                
                materials_sum_val = sanitize_text(summary_total_vat.get(JSON_KEY_MATERIALS, 0))
                materials_vat_val = sanitize_text(summary_vat_only.get(JSON_KEY_MATERIALS, 0))
                md_lines.append(
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {materials_sum_val} —Ä—É–±, "
                    f"–≤ —Ç–æ–º —á–∏—Å–ª–µ –ù–î–° {materials_vat_val} —Ä—É–±."
                )

                works_sum_val = sanitize_text(summary_total_vat.get(JSON_KEY_WORKS, 0))
                works_vat_val = sanitize_text(summary_vat_only.get(JSON_KEY_WORKS, 0))
                md_lines.append(
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –°–ú–† —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {works_sum_val} —Ä—É–±, "
                    f"–≤ —Ç–æ–º —á–∏—Å–ª–µ –ù–î–° {works_vat_val} —Ä—É–±.\n" # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
                )
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
            md_lines.append(f"#### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π ({contractor_name_s}):\n")
            positions_dict = contractor_data.get(JSON_KEY_CONTRACTOR_ITEMS, {}).get(JSON_KEY_CONTRACTOR_POSITIONS, {})
            if not positions_dict:
                md_lines.append("*–ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*\n")
            else:
                try: # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∫–ª—é—á—É
                    sorted_positions_list = sorted(positions_dict.items(), key=lambda x: int(x[0]))
                except ValueError:
                    sorted_positions_list = sorted(positions_dict.items()) # –ï—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ

                visible_item_idx_num = 1 # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ã—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                for _, pos_item_data in sorted_positions_list:
                    if not isinstance(pos_item_data, dict): continue

                    pos_name_s = sanitize_text(pos_item_data.get(JSON_KEY_JOB_TITLE, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                    pos_unit_s = sanitize_text(pos_item_data.get(JSON_KEY_UNIT, "–µ–¥.")) # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –µ–¥–∏–Ω–∏—Ü
                    pos_quantity_val = pos_item_data.get(JSON_KEY_QUANTITY) # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, sanitize_text –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –Ω–∏–∂–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
                    pos_comm_org_s = sanitize_text(pos_item_data.get(JSON_KEY_COMMENT_ORGANIZER))
                    pos_comm_contr_s = sanitize_text(pos_item_data.get(JSON_KEY_COMMENT_CONTRACTOR))
                    pos_sugg_qty_val = pos_item_data.get(JSON_KEY_SUGGESTED_QUANTITY)
                    pos_org_qty_cost_val = pos_item_data.get(JSON_KEY_ORGANIZER_QUANTITY_TOTAL_COST)
                    
                    is_chapter_f = pos_item_data.get("is_chapter", False)
                    chapter_num_s = sanitize_text(pos_item_data.get(JSON_KEY_CHAPTER_NUMBER, "")) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏ sanitize
                    chapter_ref_s = sanitize_text(pos_item_data.get("chapter_ref", ""))
                    
                    section_info_display_str = ""
                    if chapter_ref_s:
                        parent_label_str = "–ø–æ–¥—Ä–∞–∑–¥–µ–ª—É" if "." in chapter_ref_s else "—Ä–∞–∑–¥–µ–ª—É"
                        section_info_display_str = f" (–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ {parent_label_str} {chapter_ref_s})"

                    if is_chapter_f:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞/–≥–ª–∞–≤—ã
                        chapter_type_display = "–ü–æ–¥—Ä–∞–∑–¥–µ–ª" if isinstance(pos_item_data.get(JSON_KEY_CHAPTER_NUMBER), str) and "." in pos_item_data.get(JSON_KEY_CHAPTER_NUMBER, "") else "–†–∞–∑–¥–µ–ª"
                        if not pos_name_s.lower().startswith("–ª–æ—Ç ‚Ññ"): 
                            md_lines.append(f"\n##### üìò {chapter_type_display} {chapter_num_s}{section_info_display_str}: **{pos_name_s}**\n")

                            # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª—É/–ø–æ–¥—Ä–∞–∑–¥–µ–ª—É (—Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞—à—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
                            label_suffix_str = f"–ø–æ {chapter_type_display.lower()}—É {chapter_num_s} (\"{pos_name_s}\")"
                            unit_costs_ch_dict = pos_item_data.get(JSON_KEY_UNIT_COST, {})
                            if isinstance(unit_costs_ch_dict, dict) and any(v is not None for v in unit_costs_ch_dict.values()):
                                materials_uc = unit_costs_ch_dict.get(JSON_KEY_MATERIALS, 0)
                                works_uc = unit_costs_ch_dict.get(JSON_KEY_WORKS, 0)
                                indirect_uc = unit_costs_ch_dict.get(JSON_KEY_INDIRECT_COSTS, 0)
                                total_uc = unit_costs_ch_dict.get(JSON_KEY_TOTAL, 0)
                                md_lines.append(
                                    f"–ò—Ç–æ–≥–æ–≤–∞—è –µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {label_suffix_str} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {total_uc} —Ä—É–±, "
                                    f"–≤ —Ç–æ–º —á–∏—Å–ª–µ –≤–∫–ª—é—á–µ–Ω—ã –µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî {materials_uc} —Ä—É–±., "
                                    f"–µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –°–ú–† ‚Äî {works_uc} —Ä—É–±, "
                                    f"–µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî {indirect_uc} —Ä—É–±."
                                )
                            
                            total_costs_ch_dict = pos_item_data.get(JSON_KEY_TOTAL_COST, {})
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –Ω–µ–Ω—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏
                            if isinstance(total_costs_ch_dict, dict) and any(total_costs_ch_dict.get(k, 0) != 0 for k in [JSON_KEY_MATERIALS, JSON_KEY_WORKS, JSON_KEY_INDIRECT_COSTS, JSON_KEY_TOTAL]):
                                org_qty_label = f'–∑–∞ –æ–±—ä–µ–º—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ {contractor_name_s}' if pos_org_qty_cost_val else '' # –ë—ã–ª–æ: pos_item.get(JSON_KEY_ORGANIZER_QUANTITY_TOTAL_COST)
                                md_lines.append(
                                    f"–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {label_suffix_str} {org_qty_label} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {total_costs_ch_dict.get(JSON_KEY_TOTAL, 0)} —Ä—É–±, "
                                    f"–≤ —Ç–æ–º —á–∏—Å–ª–µ –≤–∫–ª—é—á–µ–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî {total_costs_ch_dict.get(JSON_KEY_MATERIALS, 0)} —Ä—É–±, "
                                    f"—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –°–ú–† ‚Äî {total_costs_ch_dict.get(JSON_KEY_WORKS, 0)} —Ä—É–±, "
                                    f"—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî {total_costs_ch_dict.get(JSON_KEY_INDIRECT_COSTS, 0)} —Ä—É–±."
                                )
                            elif not (isinstance(unit_costs_ch_dict, dict) and any(v is not None for v in unit_costs_ch_dict.values())): # –ï—Å–ª–∏ –∏ –µ–¥.—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ –±—ã–ª–æ
                                md_lines.append(f"–ü–æ–¥—Ä—è–¥—á–∏–∫ {contractor_name_s} {label_suffix_str} –Ω–µ —É–∫–∞–∑–∞–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å.")

                            if pos_org_qty_cost_val is not None and pos_org_qty_cost_val != (total_costs_ch_dict.get(JSON_KEY_TOTAL, 0) or 0):
                                md_lines.append(f"–ü—Ä–∏ —ç—Ç–æ–º –ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {label_suffix_str} –∑–∞ –æ–±—ä–µ–º—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {pos_org_qty_cost_val} —Ä—É–±.")
                            
                            if pos_comm_contr_s: # –î–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è pos_item.get(JSON_KEY_COMMENT_CONTRACTOR)
                                md_lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ {label_suffix_str}: {pos_comm_contr_s}")
                            md_lines.append("") # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–¥–µ–ª–µ

                    else: # –û–±—ã—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                        md_lines.append(f"###### {visible_item_idx_num}. **{pos_name_s}**{section_info_display_str}  ")
                        visible_item_idx_num += 1

                        if pos_comm_org_s:
                            md_lines.append(f"  \n–ü—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ–Ω–¥–µ—Ä–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É–∫–∞–∑–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ¬´{pos_comm_org_s}¬ª")
                        md_lines.append(f"  \n–û–±—ä–µ–º —Ä–∞–±–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–Ω–¥–µ—Ä–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {sanitize_text(pos_quantity_val)} {pos_unit_s}.")
                        if pos_sugg_qty_val is not None and pos_sugg_qty_val != pos_quantity_val:
                            md_lines.append(f"  \n–£—á–∞—Å—Ç–Ω–∏–∫ —Ç–µ–Ω–¥–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–∫–∞–∑–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —Å—á–∏—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º: {sanitize_text(pos_sugg_qty_val)} {pos_unit_s}.")
                        
                        # –ï–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                        uc_dict = pos_item_data.get(JSON_KEY_UNIT_COST, {})
                        uc_total = uc_dict.get(JSON_KEY_TOTAL, 0)
                        uc_mat = uc_dict.get(JSON_KEY_MATERIALS, 0)
                        uc_wrk = uc_dict.get(JSON_KEY_WORKS, 0)
                        uc_ind = uc_dict.get(JSON_KEY_INDIRECT_COSTS, 0)
                        md_lines.append(
                            f"  \n–ï–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {uc_total} —Ä—É–±/{pos_unit_s}, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤–∫–ª—é—á–µ–Ω—ã "
                            f"–µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî {uc_mat} —Ä—É–±/{pos_unit_s}, "
                            f"–µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –°–ú–† ‚Äî {uc_wrk} —Ä—É–±/{pos_unit_s}, "
                            f"–µ–¥–∏–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî {uc_ind} —Ä—É–±/{pos_unit_s}."
                        )
                        
                        # –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                        tc_dict = pos_item_data.get(JSON_KEY_TOTAL_COST, {})
                        tc_total = tc_dict.get(JSON_KEY_TOTAL, 0)
                        tc_mat = tc_dict.get(JSON_KEY_MATERIALS, 0)
                        tc_wrk = tc_dict.get(JSON_KEY_WORKS, 0)
                        tc_ind = tc_dict.get(JSON_KEY_INDIRECT_COSTS, 0)
                        md_lines.append(
                            f"  \n–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {tc_total} —Ä—É–±., –≤ —Ç–æ–º —á–∏—Å–ª–µ "
                            f"—Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî {tc_mat} —Ä—É–±., "
                            f"—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –°–ú–† ‚Äî {tc_wrk} —Ä—É–±., "
                            f"—Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî {tc_ind} —Ä—É–±."
                        )

                        if pos_org_qty_cost_val is not None and pos_org_qty_cost_val != tc_total:
                            md_lines.append(f"  \n–£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫ —É–∫–∞–∑–∞–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä–µ–º—ã —Ä–∞–±–æ—Ç –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, —Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –æ–±—ä–µ–º—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø—Ä–∏ —Ç–µ—Ö –∂–µ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —Ä–∞—Å—Ü–µ–Ω–∫–∞—Ö —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {pos_org_qty_cost_val} —Ä—É–±.")
                        if pos_comm_contr_s:
                            md_lines.append(f"  \n–£—á–∞—Å—Ç–Ω–∏–∫ —Ç–µ–Ω–¥–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–∫–∞–∑–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–∑–∏—Ü–∏–∏: ¬´{pos_comm_contr_s}¬ª")
                        md_lines.append("  \n") # –Ø–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –∏ –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ–∑–∏—Ü–∏–∏
        md_lines.append("\n---") # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
    return md_lines