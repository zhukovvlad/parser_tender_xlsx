import os

def json_to_markdown(data: dict, json_path: str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç (—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä–æ–º –∏ –ø—Ä–æ—à–µ–¥—à–∏–π
    –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É) –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Markdown-—Ñ–∞–π–ª.

    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏.
    –û–Ω–∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è
    –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è "is_chapter" –∏ "chapter_ref".
    –î–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤/–≥–ª–∞–≤ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞),
    –∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π ‚Äî –ø–æ–ª–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è. –û–±—ã—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω—É–º–µ—Ä—É—é—Ç—Å—è
    –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.

    Markdown-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π JSON-—Ñ–∞–π–ª,
    —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º, –Ω–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .md.

    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å Python, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                     —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏
                     –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏—è–º–∏
                     `normalize_lots_json_structure` –∏ `annotate_structure_fields`).
        json_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É JSON-—Ñ–∞–π–ª—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è
                         —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ .md —Ñ–∞–π–ª–∞.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ.

    Side Effects:
        - –°–æ–∑–¥–∞–µ—Ç (–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç) Markdown-—Ñ–∞–π–ª.
        - –ü–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown:
    - –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ (H1, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç).
    - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (H2, —Å–ø–∏—Å–æ–∫).
    - –õ–æ—Ç—ã (H2, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è).
    - –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (baseline_proposal):
        - –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä.
        - –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è –µ–µ –∏–º—è –∏ —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
          (–∏–∑ `baseline_proposal['items']['summary']`).
    - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ (H3 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞):
        - –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã (`summary`) –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.
        - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–ª—é—á "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è").
        - –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ (H4):
            - –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–æ–º/–≥–ª–∞–≤–æ–π (`is_chapter: True`):
                - –û–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ H5 —Å —ç–º–æ–¥–∑–∏ `üìò`, –Ω–æ–º–µ—Ä–æ–º —Ä–∞–∑–¥–µ–ª–∞,
                  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º.
                - –ü–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ä–∞–∑–¥–µ–ª–∞ –≤—ã–≤–æ–¥—è—Ç—Å—è –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–µ
                  —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ("–∑–∞ –µ–¥–∏–Ω–∏—Ü—É" –∏ "–≤—Å–µ–≥–æ") –∏ "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                  –µ—Å–ª–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±—ä–µ–∫—Ç–µ —Ä–∞–∑–¥–µ–ª–∞.
            - –û–±—ã—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ —Ä–∞–∑–¥–µ–ª—ã) –Ω—É–º–µ—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (1, 2, 3...)
              –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –∏ –≤–∫–ª—é—á–∞—é—Ç –ø–æ–ª–Ω—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,
              –µ–¥.–∏–∑–º., –∫–æ–ª-–≤–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É, —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å
              –∑–∞ –æ–±—ä–µ–º—ã –∑–∞–∫–∞–∑—á–∏–∫–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π).
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–∏—â–∞—é—Ç—Å—è –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏.
    - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–ª–æ–∫–∞—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ "0 —Ä—É–±.".
    """
    md_lines = []

    def sanitize_text(text_val):
        """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        if isinstance(text_val, str):
            return text_val.replace("\n", " ").replace("\r", " ").strip()
        return text_val

    tender_id = data.get("tender_id", "N/A")
    title = sanitize_text(data.get("tender_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
    obj = sanitize_text(data.get("object", ""))
    addr = sanitize_text(data.get("address", ""))

    md_lines.append(f"# –¢–µ–Ω–¥–µ—Ä ‚Ññ{tender_id} \"{title}\"\n")
    if obj:
        md_lines.append(f"**–û–±—ä–µ–∫—Ç:** {obj}  ")
    if addr:
        md_lines.append(f"**–ê–¥—Ä–µ—Å:** {addr}\n")

    executor = data.get("executor", {})
    if executor:
        md_lines.append("\n## –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
        for key, val in executor.items():
            if val is not None and str(val).strip() != "":
                md_lines.append(f"- {key.capitalize()}: {sanitize_text(val)}")
        md_lines.append("")

    for lot_key, lot_data in data.get("lots", {}).items():
        md_lines.append(f"\n---\n\n## {lot_key.upper()}: {sanitize_text(lot_data.get('lot_title', ''))}\n")

        baseline = lot_data.get("baseline_proposal", {})
        if baseline.get("name") == "–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            md_lines.append("**–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n")
        elif baseline:
            md_lines.append(f"**–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {sanitize_text(baseline.get('name', '–ù/–î'))}")
            baseline_summary = baseline.get("items", {}).get("summary", {})
            if baseline_summary:
                for label, values_dict in baseline_summary.items():
                    if isinstance(values_dict, dict):
                        md_lines.append(f"- {sanitize_text(label)}:")
                        total_cost_data = values_dict.get("—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ", {})
                        if isinstance(total_cost_data, dict) and any(v is not None for v in total_cost_data.values()): # –ü–µ—á–∞—Ç–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
                            for k_cost, v_cost in total_cost_data.items():
                                if v_cost is not None: # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-None –∑–Ω–∞—á–µ–Ω–∏—è
                                    md_lines.append(f"  - {sanitize_text(k_cost)}: {v_cost} —Ä—É–±.")
                md_lines.append("")
            else:
                md_lines.append("- *–ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*\n")
        
        for contractor_key_loop, contractor_data_loop in lot_data.get("proposals", {}).items():
            contractor_name = sanitize_text(contractor_data_loop.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥—Ä—è–¥—á–∏–∫"))
            md_lines.append(f"\n### –ü–æ–¥—Ä—è–¥—á–∏–∫: {contractor_name}")

            contractor_summary = contractor_data_loop.get("items", {}).get("summary", {})
            if contractor_summary:
                for label, values_dict in contractor_summary.items():
                     if isinstance(values_dict, dict):
                        md_lines.append(f"- {sanitize_text(label)}:")
                        total_cost_data = values_dict.get("—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ", {})
                        if isinstance(total_cost_data, dict) and any(v is not None for v in total_cost_data.values()):
                            for k_cost, v_cost in total_cost_data.items():
                                if v_cost is not None:
                                    md_lines.append(f"  - {sanitize_text(k_cost)}: {v_cost} —Ä—É–±.")
            
            extra_info_data = contractor_data_loop.get("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {})
            if extra_info_data:
                md_lines.append("- **–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                for k_info, v_info in extra_info_data.items():
                    md_lines.append(f"  - {sanitize_text(k_info)}: {sanitize_text(v_info) if v_info is not None else '‚Äî'}")

            md_lines.append(f"\n#### –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ {contractor_name}:")
            positions_data = contractor_data_loop.get("items", {}).get("positions", {})
            if not positions_data:
                 md_lines.append("_–ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã._")
            
            visible_item_index = 1 # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            for _, pos_item in positions_data.items(): # –ö–ª—é—á –∏–∑ positions –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                pos_name = sanitize_text(pos_item.get("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                pos_unit = sanitize_text(pos_item.get("–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è"))
                pos_quantity = pos_item.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ") # sanitize_text –∑–¥–µ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —Å—Ç—Ä–æ–∫–∞
                
                is_chapter_flag = pos_item.get("is_chapter", False)
                chapter_ref_val = pos_item.get("chapter_ref")
                
                section_info_str = ""
                if chapter_ref_val: # chapter_ref_val –º–æ–∂–µ—Ç –±—ã—Ç—å None
                    ref_str = str(chapter_ref_val) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è .count('.')
                    parent_label = "–ø–æ–¥—Ä–∞–∑–¥–µ–ª—É" if "." in ref_str else "—Ä–∞–∑–¥–µ–ª—É" # –ò—Å–ø–æ–ª—å–∑—É–µ–º ref_str
                    section_info_str = f" (–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ {parent_label} {chapter_ref_val})"

                if is_chapter_flag:
                    chapter_num = pos_item.get("–Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞", "") # –ò—Å–ø–æ–ª—å–∑—É–µ–º chapter_num –≤–º–µ—Å—Ç–æ "–Ω–æ–º–µ—Ä"
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –ø–æ–∑–∏—Ü–∏—è—Ö
                    if not pos_name.lower().startswith("–ª–æ—Ç ‚Ññ"): 
                        title_type = "–ü–æ–¥—Ä–∞–∑–¥–µ–ª" if isinstance(chapter_num, str) and "." in chapter_num else "–†–∞–∑–¥–µ–ª"
                        md_lines.append(f"\n##### üìò {title_type} {chapter_num}{section_info_str}: {pos_name}")

                        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª—É/–ø–æ–¥—Ä–∞–∑–¥–µ–ª—É
                        label_suffix = f"–ø–æ {title_type.lower()}—É {chapter_num} (\"{pos_name}\")"

                        unit_costs_chapter = pos_item.get("—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É", {})
                        if any(v is not None and v != "" for v in unit_costs_chapter.values()):
                            md_lines.append(f"- –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É {label_suffix}:")
                            for k_cost_u_ch, v_cost_u_ch in unit_costs_chapter.items():
                                if v_cost_u_ch is not None:
                                    md_lines.append(f"  - {k_cost_u_ch.capitalize()}: {v_cost_u_ch} —Ä—É–±.")

                        total_costs_chapter = pos_item.get("—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ", {})
                        if any(v is not None and v != "" for v in total_costs_chapter.values()):
                            md_lines.append(f"- –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ {label_suffix}:")
                            for k_cost_t_ch, v_cost_t_ch in total_costs_chapter.items():
                                if v_cost_t_ch is not None:
                                    md_lines.append(f"  - {k_cost_t_ch.capitalize()}: {v_cost_t_ch} —Ä—É–±.")
                        
                        comment_chapter = pos_item.get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                        if comment_chapter:
                            md_lines.append(f"- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ {label_suffix}: {sanitize_text(comment_chapter)}")
                        md_lines.append("") # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–¥–µ–ª–µ
                else: # –û–±—ã—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                    md_lines.append(f"{visible_item_index}. **{pos_name}**{section_info_str}  ")
                    visible_item_index += 1 # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    
                    if pos_unit:
                        md_lines.append(f"  - –ï–¥. –∏–∑–º: {pos_unit}")
                    if pos_quantity is not None:
                        md_lines.append(f"  - –ö–æ–ª-–≤–æ: {pos_quantity}")

                    md_lines.append("  - –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")
                    unit_costs = pos_item.get("—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É", {})
                    for cost_key_u in ["–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "—Ä–∞–±–æ—Ç—ã", "–∫–æ—Å–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "–≤—Å–µ–≥–æ"]:
                        val_u = unit_costs.get(cost_key_u)
                        val_u_str = str(val_u) if val_u not in [None, ""] else "0"
                        md_lines.append(f"    - {cost_key_u.capitalize()}: {val_u_str} —Ä—É–±.")

                    md_lines.append("  - –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ:")
                    total_costs = pos_item.get("—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ", {})
                    for cost_key_t in ["–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "—Ä–∞–±–æ—Ç—ã", "–∫–æ—Å–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "–≤—Å–µ–≥–æ"]:
                        val_t = total_costs.get(cost_key_t)
                        val_t_str = str(val_t) if val_t not in [None, ""] else "0"
                        display_key_t = "–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø–æ–∑–∏—Ü–∏–∏" if cost_key_t == "–≤—Å–µ–≥–æ" else cost_key_t.capitalize()
                        md_lines.append(f"    - {display_key_t}: {val_t_str} —Ä—É–±.")

                    customer_total = pos_item.get("—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ –∑–∞ –æ–±—ä–µ–º—ã –∑–∞–∫–∞–∑—á–∏–∫–∞")
                    if customer_total is not None:
                        md_lines.append(f"  - –ó–∞ –æ–±—ä–µ–º—ã –∑–∞–∫–∞–∑—á–∏–∫–∞: {customer_total} —Ä—É–±.")

                    comment = pos_item.get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                    if comment:
                        md_lines.append(f"  - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞: {sanitize_text(comment)}")
                    md_lines.append("")

    md_path = os.path.splitext(json_path)[0] + ".md"
    try:
        with open(md_path, "w", encoding="utf-8") as f:
            f.write("\n".join(md_lines))
        print(f"Markdown —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {md_path}")
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Markdown —Ñ–∞–π–ª–∞ {md_path}: {e}")