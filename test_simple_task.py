#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Celery –∑–∞–¥–∞—á –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.
–ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞.
"""

import os
from pathlib import Path

from dotenv import load_dotenv

from app.workers.gemini.tasks import process_tender_positions

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø—Ä—è–º—É—é"""

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_API_KEY –≤ —Ñ–∞–π–ª–µ .env –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    print(f"‚úÖ GOOGLE_API_KEY –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")

    # –ò—â–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª –ø–æ–∑–∏—Ü–∏–π
    positions_dir = Path("tenders_positions")
    positions_files = list(positions_dir.glob("*_positions.md"))

    if not positions_files:
        print(f"‚ùå –§–∞–π–ª—ã –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {positions_dir}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–Ω–¥–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–∑–∏—Ü–∏–π")
        return

    positions_file = positions_files[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –ø–æ–∑–∏—Ü–∏–π: {positions_file}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º tender_id –∏ lot_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 134_134_positions.md)
    file_parts = positions_file.stem.split("_")
    if len(file_parts) >= 2:
        tender_id = file_parts[0]
        lot_id = file_parts[1]
    else:
        tender_id = "test_tender"
        lot_id = "test_lot"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Celery worker, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º apply() –≤–º–µ—Å—Ç–æ delay() –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result = process_tender_positions.apply(args=[tender_id, lot_id, str(positions_file), api_key])

        print("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.result.get('status')}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.result.get('category')}")

        ai_data = result.result.get("ai_data", {})
        print(f"   AI –¥–∞–Ω–Ω—ã—Ö: {len(ai_data)} –ø–æ–ª–µ–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    simple_test()
