#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Celery –∑–∞–¥–∞—á –±–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
"""

import os

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from app.workers.gemini.tasks import process_tender_positions


def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø—Ä—è–º—É—é"""

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    print(f"‚úÖ GOOGLE_API_KEY –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–π
    positions_file = (
        "/root/Projects/Python_projects/parser/pending_sync_positions/temp_1754203333_5037_594277_positions.md"
    )

    if not os.path.exists(positions_file):
        print(f"‚ùå –§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {positions_file}")
        return

    print(f"‚úÖ –§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–∞–π–¥–µ–Ω: {positions_file}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Celery worker, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º apply() –≤–º–µ—Å—Ç–æ delay() –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        result = process_tender_positions.apply(args=["test_tender", "test_lot", positions_file, api_key])

        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.result.get('status')}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.result.get('category')}")

        ai_data = result.result.get("ai_data", {})
        print(f"   AI –¥–∞–Ω–Ω—ã—Ö: {len(ai_data)} –ø–æ–ª–µ–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    simple_test()
