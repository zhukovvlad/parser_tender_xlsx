"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å FastAPI-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö XLSX —Ñ–∞–π–ª–æ–≤.

–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
—Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–µ–Ω–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞. –°—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Redis, –∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏ Celery.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ó–∞–≥—Ä—É–∑–∫–∞ XLSX-—Ñ–∞–π–ª–∞ –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ Celery —Å –µ–¥–∏–Ω—ã–º task_id.
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–¥–µ—Ç–∞–ª—å–Ω–æ –∏–∑ Redis –∏–ª–∏ –æ–±—â–∞—è —Å—Ç–∞–¥–∏—è –∏–∑ Celery backend).
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤.
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ñ–∞–π–ª–∞.
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ Pydantic Settings.
"""

import json
import logging
import os
import uuid
from contextlib import asynccontextmanager
from pathlib import Path

import aiofiles
import redis.asyncio as aioredis
from anyio import to_thread
from celery.result import AsyncResult
from dotenv import load_dotenv
from fastapi import Body, FastAPI, File, Form, HTTPException, Request, UploadFile
from pydantic import BaseModel, Field
from pydantic_settings import BaseSettings, SettingsConfigDict
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse

from app.celery_app import celery_app
from app.utils.file_validation import validate_excel_upload_file
from app.workers.gemini.tasks import process_tender_positions
from app.workers.parser.tasks import run_parsing_in_background

load_dotenv()


# --------------------
# Settings & Logging
# --------------------
class Settings(BaseSettings):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞: –ø—É—Ç–∏, Redis, TTL —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–ª—é—á–∏ AI –∏ –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    app_name: str = "Tender Parser Service"
    version: str = "2.1.0"

    base_dir: Path = Path(__file__).resolve().parent
    upload_dir: Path = Field(default_factory=lambda: Path(__file__).resolve().parent / "temp_uploads")
    positions_dir: Path = Field(default_factory=lambda: Path(__file__).resolve().parent / "positions")

    redis_url: str | None = os.getenv("REDIS_URL")
    redis_host: str = os.getenv("REDIS_HOST", "localhost")
    redis_port: int = int(os.getenv("REDIS_PORT", 6379))
    redis_password: str | None = os.getenv("REDIS_PASSWORD")

    status_ttl_seconds: int = int(os.getenv("STATUS_TTL_SECONDS", "7200"))
    google_api_key: str | None = os.getenv("GOOGLE_API_KEY")

    # Pydantic v2 —Å—Ç–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
    model_config = SettingsConfigDict(
        env_file=".env",
        case_sensitive=False,
        extra="ignore",  # —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    )


S = Settings()
S.upload_dir.mkdir(parents=True, exist_ok=True)
S.positions_dir.mkdir(parents=True, exist_ok=True)

log_level = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, log_level, logging.INFO),
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
    handlers=[logging.StreamHandler()],  # –û—Ç–¥–∞—ë–º –ª–æ–≥–∏ –≤ stdout ‚Äî –ª—É—á—à–µ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    force=True,
)
logger = logging.getLogger("api")


# --------------------
# Redis helper (async)
# --------------------
async def make_redis_async():
    if S.redis_url:
        return aioredis.from_url(
            S.redis_url,
            decode_responses=True,
            socket_timeout=3,
            socket_connect_timeout=3,
            health_check_interval=30,
        )
    return aioredis.Redis(
        host=S.redis_host,
        port=S.redis_port,
        password=S.redis_password,
        decode_responses=True,
        socket_timeout=3,
        socket_connect_timeout=3,
        health_check_interval=30,
    )


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifespan-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:
        - —Å–æ–∑–¥–∞—ë—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis –∏ –∫–ª–∞–¥—ë—Ç –µ–≥–æ –≤ app.state.redis.
    –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:
        - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis.
    """
    app.state.redis = await make_redis_async()
    try:
        yield
    finally:
        # shutdown
        try:
            await app.state.redis.close()
        except Exception:
            pass


app = FastAPI(
    title=S.app_name,
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö XLSX —Ñ–∞–π–ª–æ–≤.",
    version=S.version,
    lifespan=lifespan,
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
class LoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        logger.info("üåê Incoming request: %s %s", request.method, request.url)
        logger.info("üîç Headers: %s", dict(request.headers))
        response = await call_next(request)
        logger.info("üì§ Response status: %s", response.status_code)
        return response


app.add_middleware(LoggingMiddleware)


class ParseAccepted(BaseModel):
    """–û—Ç–≤–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å.

    Attributes:
        task_id: –ï–¥–∏–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ (—Ç–∞–∫–æ–π –∂–µ —É Celery).
        message: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        enable_ai: –ü—Ä–∏–∑–Ω–∞–∫ –≤–∫–ª—é—á–µ–Ω–∏—è AI-—Ä–µ–∂–∏–º–∞.
        filename: –ò–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    """

    task_id: str
    message: str
    enable_ai: bool
    filename: str


class TaskStatus(BaseModel):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.

    Attributes:
        state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Celery (PENDING/STARTED/‚Ä¶).
        status: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏/—Å—Ç–∞—Ç—É—Å–∞.
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ SUCCESS (–µ—Å–ª–∏ –µ—Å—Ç—å).
        error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ FAILURE (–µ—Å–ª–∏ –µ—Å—Ç—å).
    """

    state: str
    status: str
    result: dict | None = None
    error: str | None = None


class PositionsRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ AI-–æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

    Attributes:
        tender_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–Ω–¥–µ—Ä–∞.
        lot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ—Ç–∞.
        file_id: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π ID —Ñ–∞–π–ª–∞ (–±–µ–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π).
    """

    tender_id: str
    lot_id: str
    file_id: str  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–µ–∑ –ø—É—Ç–µ–π


@app.post("/parse-tender/", status_code=202, tags=["Tender Processing"], response_model=ParseAccepted)
async def create_parsing_task_celery(
    file: UploadFile = File(...),
    enable_ai: bool = Form(default=False),
):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç XLSX –∏ —Å—Ç–∞–≤–∏—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥.

    - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
    - –°–æ–∑–¥–∞—ë—Ç –µ–¥–∏–Ω—ã–π task_id –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ Celery (apply_async(task_id=...)).
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É task_id –∏ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(
        f"üì• Received file: {file.filename}, content_type: {file.content_type}, size: {file.size if hasattr(file, 'size') else 'unknown'}"
    )
    logger.info(f"üìã enable_ai: {enable_ai}")

    external_id = str(uuid.uuid4())
    temp_file_path = S.upload_dir / f"{external_id}.xlsx"

    try:
        # –≤–∞–ª–∏–¥–∞—Ü–∏—è + —á—Ç–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å (–≤–∞—à –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∏ MIME/—Ä–∞–∑–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
        file_bytes = await validate_excel_upload_file(file)

        # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∏—à–µ–º –Ω–∞ –¥–∏—Å–∫
        async with aiofiles.open(temp_file_path, "wb") as f:
            await f.write(file_bytes)

        # –µ–¥–∏–Ω—ã–π task_id –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ Celery
        run_parsing_in_background.apply_async(
            args=[external_id, str(temp_file_path), enable_ai],
            task_id=external_id,
            headers={"x-request-id": external_id},  # —Ç—Ä–µ–π—Å–∏–Ω–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        )

        logger.info("Task %s queued (AI=%s)", external_id, enable_ai)
        return ParseAccepted(
            task_id=external_id,
            message=f"–ó–∞–¥–∞—á–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ ({'—Å AI' if enable_ai else '–±–µ–∑ AI'})",
            enable_ai=enable_ai,
            filename=file.filename,
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.exception("Upload error: %s", e)
        if temp_file_path.exists():
            try:
                await to_thread.run_sync(temp_file_path.unlink)
            except Exception:
                logger.warning("Temp cleanup failed", exc_info=True)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
    finally:
        # –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä UploadFile
        try:
            await file.close()
        except Exception:
            pass


@app.get("/tasks/{task_id}/status", tags=["Task Status"], response_model=TaskStatus)
async def get_unified_status(task_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.

    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ Redis (progress/stage),
    –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî –±–µ—Ä—ë—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ Celery result backend.
    """
    try:
        # —Å–Ω–∞—á–∞–ª–∞ ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ Redis, –µ—Å–ª–∏ –µ—Å—Ç—å (async –∫–ª–∏–µ–Ω—Ç)
        status_key = f"task_status:{task_id}"
        try:
            status_json = await app.state.redis.get(status_key)
        except Exception as e:
            logger.warning("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %s", e)
            status_json = None

        if status_json:
            payload = json.loads(status_json)
            # –Ω–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            return TaskStatus(
                state=payload.get("status", "processing").upper(),
                status=payload.get("stage", payload.get("status", "processing")),
                result=None,
                error=payload.get("error"),
            )

        # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å—Ç–∞—Ç—É—Å –∏–∑ Celery backend –ø–æ —Ç–æ–º—É –∂–µ UUID (–≤ —Ç—Ä–µ–¥)
        task_result: AsyncResult = await to_thread.run_sync(celery_app.AsyncResult, task_id)
        state = await to_thread.run_sync(lambda: task_result.state)
        info = await to_thread.run_sync(lambda: task_result.info)
        result = await to_thread.run_sync(lambda: task_result.result)

        if state == "PENDING" and not result:
            raise HTTPException(status_code=404, detail="Task not found")

        if state == "PENDING":
            return TaskStatus(state=state, status="Task is waiting to be processed")
        elif state == "STARTED":
            return TaskStatus(state=state, status="Task is being processed")
        elif state == "SUCCESS":
            return TaskStatus(state=state, status="Task completed successfully", result=result)
        elif state == "FAILURE":
            return TaskStatus(state=state, status="Task failed", error=str(info))
        else:
            return TaskStatus(state=state, status="Unknown state")
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("Status check error for %s: %s", task_id, e)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")


@app.get("/health", tags=["Monitoring"])
async def health_check():
    """–ü—Ä–æ—Å—Ç–æ–π health-check.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis (PING) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ Celery.
    """
    redis_ok = False
    workers = 0

    try:
        redis_ok = bool(await app.state.redis.ping())
    except Exception:
        redis_ok = False

    try:
        # celery inspect.* –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ ‚Äî —É–≤–æ–¥–∏–º –≤ —Ç—Ä–µ–¥
        pong = await to_thread.run_sync(celery_app.control.ping, timeout=1)
        workers = len(pong) if pong else 0
    except Exception:
        workers = 0

    return {"status": "ok", "redis": redis_ok, "celery_workers": workers}


@app.post("/process-positions/", status_code=202, tags=["AI Processing"])  # –æ–±—Ä–∞—Ç-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ
async def process_single_positions_file(payload: PositionsRequest = Body(...)):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç AI-–æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–π.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç `file_id`, —Ä–µ–∑–æ–ª–≤–∏—Ç –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π,
    –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ Celery.
    """
    logger.info(
        "AI positions processing request: tender_id=%s lot_id=%s file_id=%s",
        payload.tender_id,
        payload.lot_id,
        payload.file_id,
    )

    if not S.google_api_key:
        raise HTTPException(status_code=500, detail="GOOGLE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –ø–æ file_id
    safe_path = (S.positions_dir / f"{payload.file_id}.json").resolve()
    if not safe_path.is_file() or S.positions_dir not in safe_path.parents:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")

    celery_task = process_tender_positions.apply_async(
        args=[payload.tender_id, payload.lot_id, str(safe_path), S.google_api_key]
    )

    return JSONResponse(
        status_code=202,
        content={
            "task_id": celery_task.id,
            "tender_id": payload.tender_id,
            "lot_id": payload.lot_id,
            "message": "AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞",
        },
    )


@app.get("/celery-workers/status", tags=["Monitoring"])
async def get_celery_workers_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–∞—Ö Celery (active/registered/stats).

    –í—ã–∑–æ–≤—ã inspect.* –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ, –ø–æ—ç—Ç–æ–º—É –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤.
    """
    try:
        inspect = celery_app.control.inspect()
        active_workers = await to_thread.run_sync(inspect.active)
        registered_tasks = await to_thread.run_sync(inspect.registered)
        stats = await to_thread.run_sync(inspect.stats)

        return {
            "active_workers": active_workers or {},
            "registered_tasks": registered_tasks or {},
            "stats": stats or {},
            "total_workers": len(active_workers) if active_workers else 0,
        }

    except Exception as e:
        logger.exception("Celery workers status error: %s", e)
        return {"error": str(e), "active_workers": {}, "total_workers": 0}
