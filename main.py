"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- POST /parse-tender/: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç XLSX —Ñ–∞–π–ª –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä enable_ai –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏,
  —Å–æ–∑–¥–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏.
- GET /tasks/{task_id}/status: –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (processing, completed, failed).
- GET /health: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞.
- POST /process-positions/: –ó–∞–ø—É—Å–∫–∞–µ—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Celery.

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º FastAPI.
–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Redis –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.
"""

import json
import logging
import os
import shutil
import time
import uuid
from pathlib import Path

import redis
from dotenv import load_dotenv
from fastapi import BackgroundTasks, FastAPI, File, HTTPException, UploadFile

from app.celery_app import celery_app
from app.parse_with_gemini import parse_file_with_gemini
from app.workers.gemini.tasks import process_tender_batch, process_tender_positions

# --- –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv()

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = Path("logs")
os.makedirs(log_dir, exist_ok=True)

# –ß–∏—Ç–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ .env (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO)
log_level_str = os.getenv("LOG_LEVEL", "INFO").upper()
log_levels = {
    "DEBUG": logging.DEBUG,
    "INFO": logging.INFO,
    "WARNING": logging.WARNING,
    "ERROR": logging.ERROR,
}
log_level = log_levels.get(log_level_str, logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º logging –û–î–ò–ù –†–ê–ó –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_dir / "parser_service.log", mode="w", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)

# –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è (main)
log = logging.getLogger(__name__)


# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–∫–∂–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
redis_client = redis.Redis(
    host=os.getenv("REDIS_HOST", "localhost"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    password=os.getenv("REDIS_PASSWORD"),
    decode_responses=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–π—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
)

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò ---


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Tender Parser Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö XLSX —Ñ–∞–π–ª–æ–≤.",
    version="2.0.0",
)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_DIRECTORY = Path("temp_uploads")
os.makedirs(UPLOAD_DIRECTORY, exist_ok=True)


def run_parsing_in_background(task_id: str, file_path: str, enable_ai: bool = False):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º AI –∞–Ω–∞–ª–∏–∑–æ–º.

    Args:
        task_id (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.
        file_path (str): –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        enable_ai (bool): –í–∫–ª—é—á–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É.
    """
    ai_mode = "—Å AI" if enable_ai else "–±–µ–∑ AI"
    log.info(f"Task {task_id}: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file_path} {ai_mode} –Ω–∞—á–∞–ª–∞—Å—å –≤ —Ñ–æ–Ω–µ.")

    status_key = f"task_status:{task_id}"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    status_processing = json.dumps({"status": "processing", "enable_ai": enable_ai, "stage": "parsing"})
    redis_client.set(status_key, status_processing, ex=3600)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        success = parse_file_with_gemini(file_path, enable_ai=enable_ai, async_processing=False)

        if success:
            status_completed = json.dumps(
                {"status": "completed", "enable_ai": enable_ai, "with_ai": enable_ai, "stage": "completed"}
            )
            redis_client.set(status_key, status_completed, ex=3600)
            log.info(f"Task {task_id}: –û–±—Ä–∞–±–æ—Ç–∫–∞ {ai_mode} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            status_completed = json.dumps(
                {
                    "status": "completed_with_errors",
                    "enable_ai": enable_ai,
                    "with_ai": enable_ai,
                    "stage": "completed_with_errors",
                }
            )
            redis_client.set(status_key, status_completed, ex=3600)
            log.warning(f"Task {task_id}: –û–±—Ä–∞–±–æ—Ç–∫–∞ {ai_mode} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.")

    except Exception as e:
        log.error(f"Task {task_id}: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {e}", exc_info=True)
        status_failed = json.dumps({"status": "failed", "error": str(e), "enable_ai": enable_ai, "stage": "failed"})
        redis_client.set(status_key, status_failed, ex=3600)


@app.post("/parse-tender/", status_code=202, tags=["Tender Processing"])
async def create_parsing_task(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    enable_ai: bool = True,  # üëà –ò–ó–ú–ï–ù–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω AI
):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º AI –∞–Ω–∞–ª–∏–∑–æ–º.

    Args:
        file: XLSX/XLS —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        enable_ai: –í–∫–ª—é—á–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    """
    if not file.filename or not file.filename.endswith((".xlsx", ".xls")):
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ XLSX –∏–ª–∏ XLS —Ñ–∞–π–ª.",
        )

    task_id = str(uuid.uuid4())
    temp_file_path = UPLOAD_DIRECTORY / f"{task_id}_{file.filename}"

    ai_mode = "—Å AI" if enable_ai else "–±–µ–∑ AI"
    log.info(f"Task {task_id}: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª {file.filename} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ {ai_mode}")

    try:
        with open(temp_file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
    except Exception as e:
        log.error(f"Task {task_id}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    finally:
        file.file.close()

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º AI
    background_tasks.add_task(run_parsing_in_background, task_id, str(temp_file_path), enable_ai)

    return {
        "task_id": task_id,
        "message": f"–ó–∞–¥–∞—á–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ ({ai_mode})",
        "enable_ai": enable_ai,
        "filename": file.filename,
    }


@app.get("/tasks/{task_id}/status", tags=["Task Status"])
async def get_task_status(task_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ –µ–µ ID –∏–∑ Redis.
    """
    status_key = f"task_status:{task_id}"
    task_json = redis_client.get(status_key)

    if not task_json:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    return json.loads(task_json)


@app.get("/health", tags=["Monitoring"])
async def health_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    return {"status": "ok"}


@app.post("/process-positions/", status_code=202, tags=["AI Processing"])
async def process_single_positions_file(tender_id: str, lot_id: str, positions_file_path: str):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Celery.
    (–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    """
    if not Path(positions_file_path).exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise HTTPException(status_code=500, detail="GOOGLE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Celery
    celery_task = process_tender_positions.delay(tender_id, lot_id, positions_file_path, api_key)

    log.info(f"–ó–∞–ø—É—â–µ–Ω–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {tender_id}_{lot_id}, Celery task: {celery_task.id}")

    return {
        "task_id": celery_task.id,
        "tender_id": tender_id,
        "lot_id": lot_id,
        "message": "AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞",
    }


@app.get("/celery-tasks/{task_id}/status", tags=["AI Processing"])
async def get_celery_task_status(task_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Celery –∑–∞–¥–∞—á–∏ –ø–æ –µ–µ ID.
    """
    try:
        task_result = celery_app.AsyncResult(task_id)

        if task_result.state == "PENDING":
            response = {"state": task_result.state, "status": "Task is waiting to be processed"}
        elif task_result.state == "PROCESSING":
            response = {"state": task_result.state, "status": "Task is being processed", "meta": task_result.info}
        elif task_result.state == "SUCCESS":
            response = {
                "state": task_result.state,
                "status": "Task completed successfully",
                "result": task_result.result,
            }
        else:  # FAILURE
            response = {"state": task_result.state, "status": "Task failed", "error": str(task_result.info)}

        return response

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")


@app.get("/celery-workers/status", tags=["Monitoring"])
async def get_celery_workers_status():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö Celery –≤–æ—Ä–∫–µ—Ä–æ–≤.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–∞—Ö
        inspect = celery_app.control.inspect()

        active_workers = inspect.active()
        registered_tasks = inspect.registered()
        stats = inspect.stats()

        return {
            "active_workers": active_workers or {},
            "registered_tasks": registered_tasks or {},
            "stats": stats or {},
            "total_workers": len(active_workers) if active_workers else 0,
        }

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤: {e}")
        return {"error": str(e), "active_workers": {}, "total_workers": 0}
