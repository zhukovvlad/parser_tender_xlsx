#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è gemini_module.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è gemini_module,
–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from test_logging import test_gemini_logging_basic
from test_gemini_logging import test_gemini_logging_integration  
from test_processor_logging import test_processor_logging


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã gemini_module."""
    
    print("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è gemini_module\n")
    
    tests = [
        ("–ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", test_gemini_logging_basic),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è", test_gemini_logging_integration),
        ("–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞", test_processor_logging),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            print(f"‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            test_func()
            print(f"‚úÖ {test_name} - –£–°–ü–ï–®–ù–û\n")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}\n")
            failed += 1
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"   üìà –í—Å–µ–≥–æ: {passed + failed}")
    
    if failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç(–æ–≤) –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
