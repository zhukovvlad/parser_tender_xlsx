# app/workers/gemini/integration.py

import os
from pathlib import Path
from typing import Any, Dict, List, Optional

from ...gemini_module.constants import FALLBACK_CATEGORY, TENDER_CATEGORIES, TENDER_CONFIGS
from ...gemini_module.logger import get_gemini_logger
from .manager import GeminiManager

try:
    import redis

    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False


class GeminiIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è Gemini –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–π–ø–ª–∞–π–Ω.
    """

    def __init__(self, api_key: Optional[str] = None, redis_client: Optional[Any] = None):
        self.api_key = api_key or os.getenv("GOOGLE_API_KEY")
        self.redis_client = redis_client
        self.logger = get_gemini_logger()

        if not self.api_key:
            self.logger.warning("‚ö†Ô∏è GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
        self.manager = None
        if self.api_key:
            self.manager = GeminiManager(self.api_key, redis_client)

    def process_tender_lots_sync(self, tender_id: str, lots_data: List[Dict]) -> List[Dict]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞.
        """
        if not self.manager:
            self.logger.error("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)")
            return []

        results = []

        for lot_data in lots_data:
            lot_id = lot_data.get("lot_id")
            positions_file = lot_data.get("positions_file_path")

            if not positions_file or not Path(positions_file).exists():
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ—Ç–∞ {lot_id}: {positions_file}")
                continue

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
            task = {
                "tender_id": tender_id,
                "lot_id": lot_id,
                "positions_file_path": positions_file,
                "categories": TENDER_CATEGORIES,
                "configs": TENDER_CONFIGS,
                "fallback_category": FALLBACK_CATEGORY,
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            result = self.manager.process_sync(task)
            results.append(result)

        self.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –ª–æ—Ç–æ–≤")
        return results

    def queue_tender_lots_async(self, tender_id: str, lots_data: List[Dict], queue_name: str = "ai_tasks") -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ª–æ—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å Redis.
        """
        if not self.manager:
            self.logger.error("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)")
            return False

        if not self.redis_client:
            self.logger.error("‚ùå Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False

        queued_count = 0

        for lot_data in lots_data:
            lot_id = lot_data.get("lot_id")
            positions_file = lot_data.get("positions_file_path")

            if not positions_file or not Path(positions_file).exists():
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ—Ç–∞ {lot_id}: {positions_file}")
                continue

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
            task = {
                "tender_id": tender_id,
                "lot_id": lot_id,
                "positions_file_path": positions_file,
                "categories": TENDER_CATEGORIES,
                "configs": TENDER_CONFIGS,
                "fallback_category": FALLBACK_CATEGORY,
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            if self.manager.queue_task(task, queue_name):
                queued_count += 1

        self.logger.info(f"‚úÖ –í –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–ª–µ–Ω–æ: {queued_count} –ª–æ—Ç–æ–≤")
        return queued_count > 0

    def get_lot_result(self, tender_id: str, lot_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ –∏–∑ Redis.
        """
        if not self.redis_client:
            return None

        try:
            result_key = f"result:{tender_id}_{lot_id}"
            result_json = self.redis_client.get(result_key)

            if result_json:
                import json

                return json.loads(result_json.decode("utf-8"))

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

        return None

    def get_lot_status(self, tender_id: str, lot_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ –∏–∑ Redis.
        """
        if not self.redis_client:
            return None

        try:
            status_key = f"status:{tender_id}_{lot_id}"
            status_json = self.redis_client.get(status_key)

            if status_json:
                import json

                return json.loads(status_json.decode("utf-8"))

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

        return None

    @staticmethod
    def setup_redis_client(host: str = "localhost", port: int = 6379, db: int = 0) -> Optional[Any]:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.

        Args:
            host: –•–æ—Å—Ç Redis
            port: –ü–æ—Ä—Ç Redis
            db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Redis

        Returns:
            Redis –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ None –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–µ
        """
        if not REDIS_AVAILABLE:
            return None

        try:
            import redis

            client = redis.Redis(host=host, port=port, db=db, decode_responses=False)
            client.ping()
            return client
        except Exception:
            return None

    def create_positions_file_data(
        self, tender_db_id: str, tender_data: Dict, lot_ids_map: Dict[str, int]
    ) -> List[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö ID –∏–∑ –ë–î.

        Args:
            tender_db_id: –†–µ–∞–ª—å–Ω—ã–π ID —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –ë–î
            tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ JSON
            lot_ids_map: –ú–∞–ø–ø–∏–Ω–≥ "lot_1" -> —Ä–µ–∞–ª—å–Ω—ã–π_lot_db_id

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–æ–≤ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        lots_data = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ—Ç—ã –∏–∑ tender_data
        lots = tender_data.get("lots", {})

        for lot_key, lot_data in lots.items():
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ª–æ—Ç–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            real_lot_id = lot_ids_map.get(lot_key)

            if not real_lot_id:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π ID –¥–ª—è –ª–æ—Ç–∞ {lot_key}")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É positions
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º –≤ pending
            positions_paths = [
                Path("tenders_positions") / f"{tender_db_id}_{real_lot_id}_positions.md",
                Path("pending_sync_positions") / f"{tender_db_id}_{real_lot_id}_positions.md",
            ]

            positions_file_path = None
            for path in positions_paths:
                if path.exists():
                    positions_file_path = path
                    break

            if not positions_file_path:
                self.logger.warning(
                    f"‚ö†Ô∏è –§–∞–π–ª positions –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ—Ç–∞ {real_lot_id}. –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—É—Ç–∏: {[str(p) for p in positions_paths]}"
                )
                continue

            lots_data.append(
                {
                    "lot_id": str(real_lot_id),
                    "positions_file_path": str(positions_file_path),
                    "lot_key": lot_key,  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    "lot_title": lot_data.get("lot_title", ""),
                }
            )

        self.logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(lots_data)} –ª–æ—Ç–æ–≤ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return lots_data
