# app/workers/gemini/worker.py

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional

from ...gemini_module.processor import TenderProcessor
from ...gemini_module.logger import get_gemini_logger


class GeminiWorker:
    """
    –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI-–∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TenderProcessor.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤.
    """
    
    def __init__(self, api_key: str):
        self.processor = TenderProcessor(api_key)
        self.logger = get_gemini_logger()
        
    def process_positions_file(self, tender_id: str, lot_id: str, positions_file_path: str, 
                              categories: list, configs: dict, fallback_category: str = "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ") -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª _positions.md –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞.
        
        Args:
            tender_id: ID —Ç–µ–Ω–¥–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            lot_id: ID –ª–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö  
            positions_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É _positions.md
            categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            configs: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON
            fallback_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        positions_file = Path(positions_file_path)
        
        try:
            if not positions_file.exists():
                raise FileNotFoundError(f"–§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {positions_file_path}")
            
            self.logger.info(f"–ù–∞—á–∏–Ω–∞—é AI-–æ–±—Ä–∞–±–æ—Ç–∫—É –ª–æ—Ç–∞ {tender_id}_{lot_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Gemini
            self.processor.upload(str(positions_file))
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            category = self.processor.classify(categories)
            self.logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            json_data = {}
            if category in configs:
                json_data = self.processor.extract_json(category, configs)
                self.logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(json_data)} –ø–æ–ª–µ–π")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                category = fallback_category
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                "tender_id": tender_id,
                "lot_id": lot_id,
                "category": category,
                "ai_data": json_data,
                "processed_at": datetime.now().isoformat(),
                "status": "success",
                "file_path": str(positions_file)
            }
            
            self.logger.info(f"‚úÖ –õ–æ—Ç {tender_id}_{lot_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return result
            
        except Exception as e:
            error_result = {
                "tender_id": tender_id,
                "lot_id": lot_id,
                "category": fallback_category,
                "ai_data": {},
                "processed_at": datetime.now().isoformat(),
                "status": "error",
                "error": str(e),
                "file_path": str(positions_file)
            }
            
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ {tender_id}_{lot_id}: {e}")
            return error_result
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
            try:
                self.processor.cleanup()
            except:
                pass
    
    def batch_process(self, tasks: list) -> list:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
        
        Args:
            tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–∞–∂–¥–∞—è —Å –ø–æ–ª—è–º–∏:
                   tender_id, lot_id, positions_file_path, categories, configs
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        results = []
        
        self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é batch –æ–±—Ä–∞–±–æ—Ç–∫—É {len(tasks)} –∑–∞–¥–∞—á")
        
        for i, task in enumerate(tasks, 1):
            self.logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–¥–∞—á—É {i}/{len(tasks)}")
            
            result = self.process_positions_file(
                tender_id=task.get("tender_id"),
                lot_id=task.get("lot_id"),
                positions_file_path=task.get("positions_file_path"),
                categories=task.get("categories", []),
                configs=task.get("configs", {}),
                fallback_category=task.get("fallback_category", "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            )
            
            results.append(result)
        
        success_count = sum(1 for r in results if r.get("status") == "success")
        self.logger.info(f"‚úÖ Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(tasks)} —É—Å–ø–µ—à–Ω–æ")
        
        return results
    
    def cleanup_temp_files(self, temp_dir: Optional[str] = None):
        """
        –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–æ—Ä–∫–µ—Ä–∞.
        
        Args:
            temp_dir: –ü–∞–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è)
        """
        try:
            if temp_dir:
                temp_path = Path(temp_dir)
                if temp_path.exists():
                    import shutil
                    shutil.rmtree(temp_path)
                    self.logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {temp_dir} –æ—á–∏—â–µ–Ω–∞")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
            self.processor.cleanup()
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def get_status(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤–æ—Ä–∫–µ—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            is_ready = hasattr(self.processor, 'model') and self.processor.model is not None
            
            return {
                "worker_type": "gemini",
                "status": "ready" if is_ready else "not_ready",
                "processor_ready": is_ready,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            return {
                "worker_type": "gemini", 
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
