# app/workers/gemini/manager.py

import json
import time
from datetime import datetime
from typing import Any, Optional

try:
    import redis

    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False

from ...gemini_module.logger import get_gemini_logger
from .worker import GeminiWorker


class GeminiManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è Gemini –≤–æ—Ä–∫–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Redis –æ—á–µ—Ä–µ–¥–µ–π –∏ retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º.
    """

    def __init__(self, api_key: str, redis_client: Optional[Any] = None):
        self.worker = GeminiWorker(api_key)
        self.redis = redis_client if REDIS_AVAILABLE else None
        self.logger = get_gemini_logger()
        self.max_retries = 3
        self.running = False

        if not REDIS_AVAILABLE and redis_client:
            self.logger.warning("‚ö†Ô∏è Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ redis_client –ø–µ—Ä–µ–¥–∞–Ω. –†–∞–±–æ—Ç–∞—é –≤ fallback —Ä–µ–∂–∏–º–µ.")

    def run_queue_worker(self, queue_name: str = "ai_tasks"):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ Redis –æ—á–µ—Ä–µ–¥–∏.
        """
        if not self.redis:
            self.logger.error("‚ùå Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å queue worker.")
            return

        self.running = True
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Gemini –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'...")

        while self.running:
            try:
                # –ó–∞–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                task_data = self.redis.blpop([queue_name], timeout=5)

                if not task_data:
                    continue

                queue_name_from_redis, task_json = task_data
                task = json.loads(task_json.decode("utf-8"))

                self.logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task.get('tender_id')}_{task.get('lot_id')}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É —Å retry
                result = self._process_with_retry(task)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._save_result(task, result)

            except KeyboardInterrupt:
                self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.running = False
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
                time.sleep(1)

        self.logger.info("‚úÖ –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _process_with_retry(self, task: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        last_error = None

        for attempt in range(1, self.max_retries + 1):
            try:
                self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}")

                result = self.worker.process_positions_file(
                    tender_id=task.get("tender_id"),
                    lot_id=task.get("lot_id"),
                    positions_file_path=task.get("positions_file_path"),
                    categories=task.get("categories", []),
                    configs=task.get("configs", {}),
                    fallback_category=task.get("fallback_category", "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
                )

                if result.get("status") == "success":
                    return result
                else:
                    last_error = result.get("error", "Unknown error")

            except Exception as e:
                last_error = str(e)
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")

                if attempt < self.max_retries:
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    delay = 2 ** (attempt - 1)
                    time.sleep(delay)

        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        return {
            "tender_id": task.get("tender_id"),
            "lot_id": task.get("lot_id"),
            "status": "failed",
            "error": f"–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}",
            "processed_at": datetime.now().isoformat(),
        }

    def _save_result(self, task: dict, result: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            if self.redis:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å TTL 24 —á–∞—Å–∞
                result_key = f"result:{task.get('tender_id')}_{task.get('lot_id')}"
                self.redis.setex(result_key, 86400, json.dumps(result, ensure_ascii=False))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                self._update_task_status(task, result.get("status", "unknown"))

            self.logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {task.get('tender_id')}_{task.get('lot_id')}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    def _update_task_status(self, task: dict, status: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Redis"""
        try:
            status_key = f"status:{task.get('tender_id')}_{task.get('lot_id')}"
            status_data = {"status": status, "updated_at": datetime.now().isoformat(), "worker": "gemini"}
            self.redis.setex(status_key, 86400, json.dumps(status_data))
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

    def process_sync(self, task: dict) -> dict:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Redis.
        """
        return self.worker.process_positions_file(
            tender_id=task.get("tender_id"),
            lot_id=task.get("lot_id"),
            positions_file_path=task.get("positions_file_path"),
            categories=task.get("categories", []),
            configs=task.get("configs", {}),
            fallback_category=task.get("fallback_category", "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
        )

    def queue_task(self, task: dict, queue_name: str = "ai_tasks") -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å Redis.
        """
        if not self.redis:
            self.logger.error("‚ùå Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å.")
            return False

        try:
            task_json = json.dumps(task, ensure_ascii=False)
            self.redis.rpush(queue_name, task_json)

            self.logger.info(
                f"üì§ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å '{queue_name}': {task.get('tender_id')}_{task.get('lot_id')}"
            )
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä"""
        self.running = False
