#!/usr/bin/env python3
# app/workers/gemini/cli.py

"""
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Gemini –≤–æ—Ä–∫–µ—Ä–∞.
"""

import argparse
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    env_path = Path(__file__).parent.parent.parent.parent / '.env'
    load_dotenv(env_path)
except ImportError:
    env_file = Path(__file__).parent.parent.parent.parent / '.env'
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip().strip('"').strip("'")
                    os.environ[key] = value

from app.workers.gemini import GeminiManager, GeminiIntegration
from app.gemini_module.logger import get_gemini_logger


def main():
    parser = argparse.ArgumentParser(description="Gemini –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤")
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
    queue_parser = subparsers.add_parser("worker", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏ Redis")
    queue_parser.add_argument("--queue", default="ai_tasks", help="–ò–º—è –æ—á–µ—Ä–µ–¥–∏ Redis")
    queue_parser.add_argument("--redis-host", default="localhost", help="–•–æ—Å—Ç Redis")
    queue_parser.add_argument("--redis-port", type=int, default=6379, help="–ü–æ—Ä—Ç Redis")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    process_parser = subparsers.add_parser("process", help="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–æ–∑–∏—Ü–∏–π")
    process_parser.add_argument("tender_id", help="ID —Ç–µ–Ω–¥–µ—Ä–∞")
    process_parser.add_argument("lot_id", help="ID –ª–æ—Ç–∞")
    process_parser.add_argument("positions_file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É positions.md")
    
    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument("--api-key", help="Google API –∫–ª—é—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ GOOGLE_API_KEY)")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = get_gemini_logger()
    if args.verbose:
        import logging
        logging.getLogger().setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = args.api_key or os.getenv("GOOGLE_API_KEY")
    if not api_key:
        logger.error("‚ùå Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_API_KEY –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --api-key")
        return 1
    
    try:
        if args.command == "worker":
            run_worker(api_key, args)
        elif args.command == "process":
            run_process(api_key, args)
        else:
            parser.print_help()
            
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


def run_worker(api_key: str, args):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏"""
    logger = get_gemini_logger()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    try:
        import redis
        redis_client = redis.Redis(host=args.redis_host, port=args.redis_port, decode_responses=False)
        redis_client.ping()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {args.redis_host}:{args.redis_port}")
    except ImportError:
        logger.error("‚ùå Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install redis")
        return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = GeminiManager(api_key, redis_client)
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Gemini –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏ '{args.queue}'...")
    manager.run_queue_worker(args.queue)


def run_process(api_key: str, args):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    logger = get_gemini_logger()
    
    positions_file = Path(args.positions_file)
    if not positions_file.exists():
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {positions_file}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    manager = GeminiManager(api_key)
    
    from app.gemini_module.constants import TENDER_CATEGORIES, TENDER_CONFIGS, FALLBACK_CATEGORY
    
    task = {
        "tender_id": args.tender_id,
        "lot_id": args.lot_id,
        "positions_file_path": str(positions_file),
        "categories": TENDER_CATEGORIES,
        "configs": TENDER_CONFIGS,
        "fallback_category": FALLBACK_CATEGORY
    }
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {positions_file}")
    result = manager.process_sync(task)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   –¢–µ–Ω–¥–µ—Ä: {result.get('tender_id')}")
    print(f"   –õ–æ—Ç: {result.get('lot_id')}")
    print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('category')}")
    
    if result.get('status') == 'success':
        ai_data = result.get('ai_data', {})
        print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: {len(ai_data)}")
        if ai_data:
            print(f"   –î–∞–Ω–Ω—ã–µ: {list(ai_data.keys())}")
    else:
        print(f"   –û—à–∏–±–∫–∞: {result.get('error')}")


if __name__ == "__main__":
    main()
