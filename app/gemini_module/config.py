# app/gemini_module/config.py
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π
–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API.
"""

from pathlib import Path
from typing import Dict, List, Optional

# ======================================================================
# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø GEMINI API ===
# ======================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MODEL_CONFIG = {
    "default_model": "models/gemini-2.5-flash",  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    "fallback_model": "models/gemini-2.5-flash",
    "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    "max_tokens": 8192,
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
FILE_CONFIG = {
    "supported_extensions": [".md", ".txt", ".json", ".xlsx", ".docx"],
    "max_file_size_mb": 50,
    "default_input_file": "42_42_positions.md",
    "output_format": "json",
    "encoding": "utf-8",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏
LOGGING_CONFIG = {
    "default_level": "INFO",
    "verbose_level": "DEBUG",
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "enable_file_logging": True,
    "log_file": "logs/gemini.log",
    "logger_name": "gemini_module",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è retry –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
RETRY_CONFIG = {
    "max_retries": 3,
    "base_delay": 1.0,  # —Å–µ–∫—É–Ω–¥—ã
    "max_delay": 60.0,  # —Å–µ–∫—É–Ω–¥—ã
    "backoff_factor": 2.0,
    "timeout": 120,  # —Å–µ–∫—É–Ω–¥—ã
}

# ======================================================================
# === –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ò –°–û–û–ë–©–ï–ù–ò–Ø ===
# ======================================================================

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
ANALYSIS_METADATA = {
    "version": "2.0.0",
    "analyzer": "TenderProcessor",
    "api_provider": "Google Gemini",
    "model": MODEL_CONFIG["default_model"],
}

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
MESSAGES = {
    # –ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
    "start": "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
    "upload": "üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
    "classify": "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞...",
    "extract": "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É",
    "success": "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ",
    # –°—Ç–∞—Ç—É—Å—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    "file_uploaded": "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. ID: {file_id}",
    "classified": "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: '{category}'",
    "data_extracted": "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –ø–æ —à–∞–±–ª–æ–Ω—É –¥–ª—è '{category}'",
    # –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
    "warning": "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
    "file_not_found": "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}",
    "api_key_missing": "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_API_KEY",
    "invalid_category": "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '{result}'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback.",
    # –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    "cleanup": "üßπ –û—á–∏—â–∞—é —Ä–µ—Å—É—Ä—Å—ã...",
    "file_deleted": "üóëÔ∏è –§–∞–π–ª {file_id} —É–¥–∞–ª—ë–Ω.",
    "cleanup_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {error}",
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    "saving": "üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª: {filename}",
    "saved": "üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}",
    "save_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {error}",
}

# ======================================================================
# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
# ======================================================================


def get_model_config(model_name: Optional[str] = None) -> Dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏.

    Args:
        model_name: –ò–º—è –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–∏
    """
    config = MODEL_CONFIG.copy()
    if model_name:
        config["model"] = model_name
    else:
        config["model"] = config["default_model"]
    return config


def validate_input_file(file_path: Path) -> tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not file_path.exists():
        return False, f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}"

    if file_path.suffix.lower() not in FILE_CONFIG["supported_extensions"]:
        supported = ", ".join(FILE_CONFIG["supported_extensions"])
        return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {supported}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    size_mb = file_path.stat().st_size / (1024 * 1024)
    if size_mb > FILE_CONFIG["max_file_size_mb"]:
        return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {size_mb:.1f}MB (–º–∞–∫—Å–∏–º—É–º: {FILE_CONFIG['max_file_size_mb']}MB)"

    return True, None


def get_available_test_files(directory: Path = None) -> List[Path]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.

    Args:
        directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)

    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
    """
    if directory is None:
        directory = Path(".")

    test_files = []
    for ext in FILE_CONFIG["supported_extensions"]:
        test_files.extend(directory.glob(f"*{ext}"))

    return sorted(test_files)


def create_error_report(error: Exception, context: Dict) -> Dict:
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ.

    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
    """
    return {
        "error_type": type(error).__name__,
        "error_message": str(error),
        "context": context,
        "metadata": ANALYSIS_METADATA,
        "timestamp": context.get("timestamp"),
        "file_path": context.get("file_path"),
    }


def get_message(key: str, **kwargs) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        key: –ö–ª—é—á —Å–æ–æ–±—â–µ–Ω–∏—è
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message_template = MESSAGES.get(key, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {key}")
    try:
        return message_template.format(**kwargs)
    except KeyError as e:
        return f"{message_template} (–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e})"


# ======================================================================
# === –≠–ö–°–ü–û–†–¢ –ö–û–ù–°–¢–ê–ù–¢ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===
# ======================================================================

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
DEFAULT_MODEL = MODEL_CONFIG["default_model"]
SUPPORTED_EXTENSIONS = FILE_CONFIG["supported_extensions"]
MAX_FILE_SIZE_MB = FILE_CONFIG["max_file_size_mb"]
DEFAULT_INPUT_FILE = FILE_CONFIG["default_input_file"]
