# app/utils/file_validation.py
import logging
import zipfile
from io import BytesIO
from typing import Optional

from fastapi import HTTPException, UploadFile
from fastapi.concurrency import run_in_threadpool
from openpyxl import load_workbook
from openpyxl.utils.exceptions import InvalidFileException

# --- Logger ---
logger = logging.getLogger(__name__)

# --- –ª–∏–º–∏—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏) ---
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB
MAX_UNZIPPED_SIZE = 200 * 1024 * 1024  # 200 MB (anti zip-bomb)
MAX_ZIP_ENTRIES = 5000  # –º–∞–∫—Å. —á–∏—Å–ª–æ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
READ_CHUNK_SIZE = 512 * 1024  # 512 KB

MAX_SHEETS = 1  # —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –ª–∏—Å—Ç
MAX_ROWS_PER_SHEET = 5000  # –Ω–µ –±–æ–ª–µ–µ 5000 —Å—Ç—Ä–æ–∫ –Ω–∞ –ª–∏—Å—Ç–µ

ALLOWED_EXTS = {".xlsx"}  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ ".xlsm"


def _ext_ok(filename: Optional[str]) -> bool:
    if not filename:
        return False
    name = filename.lower()
    return any(name.endswith(ext) for ext in ALLOWED_EXTS)


async def _read_limited(upload_file: UploadFile) -> bytes:
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∫—É—Å–∫–∞–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä."""
    total = 0
    chunks = []
    while True:
        chunk = await upload_file.read(READ_CHUNK_SIZE)
        if not chunk:
            break
        total += len(chunk)
        if total > MAX_FILE_SIZE:
            raise HTTPException(
                status_code=413,
                detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE // (1024*1024)} MB.",
            )
        chunks.append(chunk)
    return b"".join(chunks)


def _zip_guard(xlsx_bytes: bytes) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XLSX –∫–∞–∫ ZIP (anti zip-bomb) –ø–µ—Ä–µ–¥ openpyxl."""
    try:
        with zipfile.ZipFile(BytesIO(xlsx_bytes)) as zf:
            infos = zf.infolist()
            if len(infos) == 0 or len(infos) > MAX_ZIP_ENTRIES:
                raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XLSX-–∞—Ä—Ö–∏–≤ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).")
            total_unzipped = 0
            for i in infos:
                if i.file_size < 0 or i.compress_size < 0:
                    raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XLSX-–∞—Ä—Ö–∏–≤ (–∏—Å–ø–æ—Ä—á—ë–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤).")
                total_unzipped += i.file_size
                if total_unzipped > MAX_UNZIPPED_SIZE:
                    raise HTTPException(
                        status_code=400, detail="–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–≤–æ–∑–º–æ–∂–Ω–∞ zip-–±–æ–º–±–∞)."
                    )
    except zipfile.BadZipFile:
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º XLSX (–ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤).")


def _openpyxl_quick_checks(xlsx_bytes: bytes) -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ threadpool):
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ XLSX (openpyxl).
    - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã: —Ä–æ–≤–Ω–æ 1 –ª–∏—Å—Ç –∏ –Ω–µ –±–æ–ª–µ–µ 5000 —Å—Ç—Ä–æ–∫.
    """
    logger = logging.getLogger(__name__)
    
    wb = None
    try:
        logger.info("üìä Loading workbook with openpyxl...")
        wb = load_workbook(BytesIO(xlsx_bytes), read_only=True, data_only=True)
        sheetnames = wb.sheetnames
        logger.info("üìã Found sheets: %s", sheetnames)
        
        if not sheetnames:
            raise HTTPException(status_code=400, detail="–í –∫–Ω–∏–≥–µ –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤.")
        if len(sheetnames) != MAX_SHEETS:
            raise HTTPException(status_code=400, detail=f"–í –∫–Ω–∏–≥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ {MAX_SHEETS} –ª–∏—Å—Ç.")

        ws = wb[sheetnames[0]]
        
        # –í read_only —Ä–µ–∂–∏–º–µ max_row –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Excel (1048576)
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–¥—Å—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        actual_rows = 0
        for row in ws.iter_rows(max_row=MAX_ROWS_PER_SHEET + 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–µ–ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            if any(cell.value is not None for cell in row):
                actual_rows += 1
                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç
                if actual_rows > MAX_ROWS_PER_SHEET:
                    break
        
        logger.info("üìè Sheet has %d rows with data (max allowed: %d)", actual_rows, MAX_ROWS_PER_SHEET)
        
        if actual_rows > MAX_ROWS_PER_SHEET:
            raise HTTPException(
                status_code=400,
                detail=f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫: {actual_rows}. –î–æ–ø—É—Å—Ç–∏–º–æ –Ω–µ –±–æ–ª–µ–µ {MAX_ROWS_PER_SHEET}.",
            )
    except InvalidFileException as e:
        logger.exception("‚ùå InvalidFileException")
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º Excel-—Ñ–∞–π–ª–æ–º.") from e
    except HTTPException:
        # –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞—à–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        logger.exception("‚ùå Unexpected error in _openpyxl_quick_checks")
        raise HTTPException(
            status_code=400,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Excel-—Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.",
        ) from e
    finally:
        try:
            if wb is not None:
                wb.close()
        except Exception:
            pass


async def validate_excel_upload_file(upload_file: UploadFile) -> bytes:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel-—Ñ–∞–π–ª (.xlsx) –ø–µ—Ä–µ–¥ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

    –ü—Ä–æ–≤–µ—Ä–∫–∏:
      1) –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ (ALLOWED_EXTS).
      2) –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫—É—Å–∫–∞–º–∏ (MAX_FILE_SIZE) ‚Äî HTTP 413 –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏.
      3) Anti ZIP-bomb: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ZIP, —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, —Å—É–º–º–∞—Ä–Ω—ã–π uncompressed size.
      4) –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ openpyxl –≤ threadpool.
      5) –ë—ã—Å—Ç—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–æ–≤–Ω–æ 1 –ª–∏—Å—Ç –∏ ‚â§ MAX_ROWS_PER_SHEET —Å—Ç—Ä–æ–∫.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      bytes ‚Äî —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
    """
    logger.info("üîç VALIDATION DEBUG: filename=%s, content_type=%s", upload_file.filename, upload_file.content_type)

    if not _ext_ok(upload_file.filename):
        allowed = ", ".join(sorted(ALLOWED_EXTS))
        logger.error("‚ùå Extension check failed: filename=%s, allowed=%s", upload_file.filename, allowed)
        raise HTTPException(status_code=400, detail=f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {allowed}")

    try:
        file_bytes = await _read_limited(upload_file)
        logger.info("‚úÖ File read successfully: size=%d bytes", len(file_bytes))
    except HTTPException:
        logger.error("‚ùå File read failed with HTTPException")
        raise
    except Exception:
        logger.exception("‚ùå File read failed with generic exception")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.")

    try:
        _zip_guard(file_bytes)
        logger.info("‚úÖ ZIP structure validation passed")
    except HTTPException:
        logger.error("‚ùå ZIP structure validation failed")
        raise

    try:
        # openpyxl –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –≤ threadpool, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        await run_in_threadpool(_openpyxl_quick_checks, file_bytes)
        logger.info("‚úÖ OpenPyXL validation passed")
    except HTTPException as e:
        logger.exception("‚ùå OpenPyXL validation failed: %s", e.detail)
        raise
    except Exception as e:
        logger.exception("‚ùå OpenPyXL validation failed with unexpected error")
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Excel: {e!s}") from e

    logger.info("üéâ All validations passed successfully")
    return file_bytes
