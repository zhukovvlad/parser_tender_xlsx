# app/parse_with_gemini.py

"""
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è parse.py —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini AI –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª parse.py, –¥–æ–±–∞–≤–ª—è—è:
1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å GeminiWorker –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–æ–≤
2. –ü–æ–¥–¥–µ—Ä–∂–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Redis
3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
"""

import argparse
import json
import logging
import os
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    pass  # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ .env
log_level = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, log_level, logging.INFO),
    format="%(levelname)s:%(name)s:%(funcName)s:%(lineno)d:%(message)s",
    force=True,  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
)

from app.workers import GeminiIntegration

from .gemini_module.logger import get_gemini_logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
from .parse import parse_file as original_parse_file

log = logging.getLogger(__name__)


def parse_file_with_gemini(
    xlsx_path: str, enable_ai: bool = False, async_processing: bool = False, redis_config: Optional[Dict] = None
) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π AI –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

    Args:
        xlsx_path: –ü—É—Ç—å –∫ XLSX —Ñ–∞–π–ª—É
        enable_ai: –í–∫–ª—é—á–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É
        async_processing: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Redis
        redis_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis

    Returns:
        True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        from dotenv import load_dotenv

        load_dotenv(override=True)  # override=True –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    except ImportError:
        pass

    gemini_logger = get_gemini_logger()
    gemini_enabled = bool(os.getenv("GOOGLE_API_KEY"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
    ai_will_be_used = enable_ai and gemini_enabled

    if enable_ai and not gemini_enabled:
        gemini_logger.warning("‚ö†Ô∏è AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –Ω–æ GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        gemini_logger.info("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    elif not enable_ai:
        log.info("‚ÑπÔ∏è AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º ID
    log.info("üîÑ –í—ã–ø–æ–ª–Ω—è—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")

    try:
        # –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ–º positions —Ñ–∞–π–ª—ã - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
        db_id, lot_ids_map, tender_data = parse_with_ids(xlsx_path, create_reports=True)

        if not db_id:
            log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ç Go-—Å–µ—Ä–≤–µ—Ä–∞")
            return False

        log.info(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Tender DB ID: {db_id}")
        log.info(f"üìã –ü–æ–ª—É—á–µ–Ω—ã ID –ª–æ—Ç–æ–≤: {lot_ids_map}")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return False

    # –ï—Å–ª–∏ AI –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º
    if not ai_will_be_used:
        log.info("‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞")
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID (fallback —Ä–µ–∂–∏–º)
    if str(db_id).startswith("temp_"):
        gemini_logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID - AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        gemini_logger.info("‚ÑπÔ∏è AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID")
        gemini_logger.info("‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ _positions —Ñ–∞–π–ª—ã")
        return True

    # –ó–∞–ø—É—Å–∫–∞–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID
    return process_tender_with_gemini_ids(db_id, lot_ids_map, tender_data, async_processing, redis_config)


def parse_with_ids(
    xlsx_path: str, create_reports: bool = True
) -> tuple[Optional[str], Optional[Dict[str, int]], Optional[Dict]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏ –¥–∞–Ω–Ω—ã–µ.

    Args:
        xlsx_path: –ü—É—Ç—å –∫ XLSX —Ñ–∞–π–ª—É
        create_reports: –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ positions —Ñ–∞–π–ª—ã (–æ–±—ã—á–Ω–æ True - –Ω—É–∂–Ω—ã –¥–ª—è AI)

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (db_id, lot_ids_map, tender_data) –∏–ª–∏ (None, None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    import json
    import os
    from pathlib import Path

    import openpyxl
    from openpyxl.worksheet.worksheet import Worksheet

    from .excel_parser.postprocess import normalize_lots_json_structure, replace_div0_with_null
    from .excel_parser.read_executer_block import read_executer_block
    from .excel_parser.read_headers import read_headers
    from .excel_parser.read_lots_and_boundaries import read_lots_and_boundaries
    from .json_to_server.send_json_to_go_server import register_tender_in_go

    source_path = Path(xlsx_path)
    if not source_path.exists():
        log.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xlsx_path}")
        return None, None, None

    # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ XLSX
    log.info("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ XLSX —Ñ–∞–π–ª–∞...")
    try:
        wb = openpyxl.load_workbook(source_path, data_only=True)
        ws: Worksheet = wb.active

        processed_data: Dict[str, Any] = {
            **read_headers(ws),
            "executor": read_executer_block(ws),
            "lots": read_lots_and_boundaries(ws),
        }
        processed_data = normalize_lots_json_structure(processed_data)
        processed_data = replace_div0_with_null(processed_data)
        log.info("‚úÖ XLSX —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XLSX: {e}")
        return None, None, None

    # –≠—Ç–∞–ø 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Go-—Å–µ—Ä–≤–µ—Ä–µ
    log.info("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–∞ Go-—Å–µ—Ä–≤–µ—Ä–µ...")
    go_server_url = os.getenv("GO_SERVER_API_ENDPOINT")
    fallback_mode = os.getenv("PARSER_FALLBACK_MODE", "false").lower() == "true"
    go_server_api_key = os.getenv("GO_SERVER_API_KEY")

    if not go_server_url:
        log.error("‚ùå GO_SERVER_API_ENDPOINT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None, None, None

    success, db_id, lot_ids_map = register_tender_in_go(
        processed_data, go_server_url, go_server_api_key, fallback_mode=fallback_mode
    )

    if not success:
        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä")
        return None, None, None

    # –≠—Ç–∞–ø 3: –£—Å–ª–æ–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ positions —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID
    if create_reports:
        log.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ positions —Ñ–∞–π–ª–æ–≤...")
        try:
            from pathlib import Path

            from .markdown_utils.positions_report import generate_reports_for_all_lots

            output_dir = Path("tenders_positions")  # –°–æ–∑–¥–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
            output_dir.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            base_name = db_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DB ID

            position_reports_paths = generate_reports_for_all_lots(processed_data, output_dir, base_name, lot_ids_map)
            log.info("‚úÖ Positions —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è positions —Ñ–∞–π–ª–æ–≤: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ positions —Ñ–∞–π–ª–æ–≤
    else:
        log.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ positions —Ñ–∞–π–ª–æ–≤ (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏)")

    return db_id, lot_ids_map, processed_data


def process_tender_with_gemini_ids(
    tender_db_id: str,
    lot_ids_map: Dict[str, int],
    tender_data: Dict,
    async_processing: bool = False,
    redis_config: Optional[Dict] = None,
) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö ID –∏–∑ –ë–î.

    Args:
        tender_db_id: –†–µ–∞–ª—å–Ω—ã–π ID —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ –ë–î
        lot_ids_map: –ú–∞–ø–ø–∏–Ω–≥ –ª–æ—Ç–æ–≤ –∫ –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–º ID
        tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞
        async_processing: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        redis_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis

    Returns:
        True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    gemini_logger = get_gemini_logger()
    gemini_logger.info(f"üß† –ù–∞—á–∏–Ω–∞—é AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–Ω–¥–µ—Ä–∞ {tender_db_id}")

    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        redis_client = None
        if async_processing:
            redis_config = redis_config or {}
            redis_client = GeminiIntegration.setup_redis_client(
                host=redis_config.get("host", "localhost"),
                port=redis_config.get("port", 6379),
                db=redis_config.get("db", 0),
            )

            if not redis_client:
                gemini_logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                async_processing = False

        integration = GeminiIntegration(redis_client=redis_client)

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è positions —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID
        lots_data = integration.create_positions_file_data(tender_db_id, tender_data, lot_ids_map)

        if not lots_data:
            gemini_logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–æ–≤ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return True

        gemini_logger.info(f"ÔøΩ –ù–∞–π–¥–µ–Ω–æ {len(lots_data)} –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        if async_processing:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Redis
            success = integration.queue_tender_lots_async(tender_db_id, lots_data)

            if success:
                gemini_logger.info(f"‚úÖ –í—Å–µ {len(lots_data)} –ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å Redis")
                gemini_logger.info("‚ÑπÔ∏è –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã worker'–∞–º–∏ –ø–æ—Å–ª–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                gemini_logger.info("‚ÑπÔ∏è –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ _positions —Ñ–∞–π–ª—ã")
                return True
            else:
                gemini_logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å")
                return False
        else:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            gemini_logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é AI –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            results = integration.process_tender_lots_sync(tender_db_id, lots_data)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = sum(1 for r in results if r.get("status") == "success")
            failed = sum(1 for r in results if r.get("status") == "error")

            gemini_logger.info(f"üìà AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
            results_path = Path("tenders_json") / f"{tender_db_id}_gemini_results.json"
            try:
                with open(results_path, "w", encoding="utf-8") as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
                gemini_logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_path}")
            except Exception as e:
                gemini_logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")

            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–∏—Å—Ö–æ–¥–Ω—ã–π JSON + AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã) –∏ —á–∞–Ω–∫–∏
            gemini_logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ —á–∞–Ω–∫–æ–≤...")
            try:
                if successful > 0:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å AI –¥–∞–Ω–Ω—ã–º–∏
                    from .markdown_utils.ai_enhanced_reports import regenerate_reports_with_ai_data

                    md_success = regenerate_reports_with_ai_data(
                        tender_data=tender_data, ai_results=results, db_id=tender_db_id, lot_ids_map=lot_ids_map
                    )

                    if md_success:
                        gemini_logger.info("‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å AI –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω—ã")

                        # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
                        try:
                            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
                            gemini_logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
                            # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤
                            gemini_logger.info("‚úÖ –ß–∞–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
                        except Exception as e:
                            gemini_logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤: {e}")
                    else:
                        gemini_logger.warning(
                            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –æ—Å—Ç–∞—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ _positions —Ñ–∞–π–ª—ã"
                        )
                else:
                    # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ AI –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ _positions —Ñ–∞–π–ª—ã
                    gemini_logger.info("üîÑ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞, –æ—Å—Ç–∞—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ _positions —Ñ–∞–π–ª—ã")

            except Exception as e:
                gemini_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
                gemini_logger.info("‚ÑπÔ∏è –û—Å—Ç–∞—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ _positions —Ñ–∞–π–ª—ã")

            return successful > 0

    except Exception as e:
        gemini_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return False


def extract_tender_id(json_path: Path, tender_data: Dict) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

    Args:
        json_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞

    Returns:
        ID —Ç–µ–Ω–¥–µ—Ä–∞
    """
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    tender_id = tender_data.get("tender_id") or tender_data.get("db_id")

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if not tender_id:
        tender_id = json_path.stem

    return str(tender_id)


def get_processing_status(tender_id: str, lot_ids: List[str], redis_config: Optional[Dict] = None) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞.

    Args:
        tender_id: ID —Ç–µ–Ω–¥–µ—Ä–∞
        lot_ids: –°–ø–∏—Å–æ–∫ ID –ª–æ—Ç–æ–≤
        redis_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ª–æ—Ç–æ–≤
    """
    redis_client = None
    if redis_config:
        redis_client = GeminiIntegration.setup_redis_client(
            host=redis_config.get("host", "localhost"),
            port=redis_config.get("port", 6379),
            db=redis_config.get("db", 0),
        )

    if not redis_client:
        return {"error": "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

    integration = GeminiIntegration(redis_client=redis_client)
    return integration.get_processing_status(tender_id, lot_ids)


def main():
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å Gemini"""
    parser = argparse.ArgumentParser(description="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ —Å Gemini AI")

    subparsers = parser.add_subparsers(dest="command", help="–ö–æ–º–∞–Ω–¥—ã")

    # –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    process_parser = subparsers.add_parser("process", help="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å XLSX —Ñ–∞–π–ª")
    process_parser.add_argument("xlsx_file", help="–ü—É—Ç—å –∫ XLSX —Ñ–∞–π–ª—É")
    process_parser.add_argument("--ai", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫—É")
    process_parser.add_argument("--async", action="store_true", help="–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    process_parser.add_argument("--redis-host", default="localhost", help="–•–æ—Å—Ç Redis")
    process_parser.add_argument("--redis-port", type=int, default=6379, help="–ü–æ—Ä—Ç Redis")
    process_parser.add_argument("--redis-db", type=int, default=0, help="–ë–∞–∑–∞ Redis")

    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_parser = subparsers.add_parser("status", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    status_parser.add_argument("tender_id", help="ID —Ç–µ–Ω–¥–µ—Ä–∞")
    status_parser.add_argument("lot_ids", nargs="+", help="ID –ª–æ—Ç–æ–≤")
    status_parser.add_argument("--redis-host", default="localhost", help="–•–æ—Å—Ç Redis")
    status_parser.add_argument("--redis-port", type=int, default=6379, help="–ü–æ—Ä—Ç Redis")
    status_parser.add_argument("--redis-db", type=int, default=0, help="–ë–∞–∑–∞ Redis")

    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return 1

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ .env –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    log_level = os.getenv("LOG_LEVEL", "INFO").upper() if not args.verbose else "DEBUG"
    gemini_log_level = os.getenv("GEMINI_LOG_LEVEL", "INFO").upper() if not args.verbose else "DEBUG"

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.getLogger().setLevel(getattr(logging, log_level, logging.INFO))
    logging.getLogger("app").setLevel(getattr(logging, log_level, logging.INFO))
    get_gemini_logger().setLevel(getattr(logging, gemini_log_level, logging.INFO))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_format = (
        "%(levelname)s:%(name)s:%(funcName)s:%(lineno)d:%(message)s"
        if args.verbose
        else "%(levelname)s:%(name)s:%(message)s"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    root_logger = logging.getLogger()
    if not root_logger.handlers:
        handler = logging.StreamHandler()
        handler.setLevel(getattr(logging, log_level, logging.INFO))
        formatter = logging.Formatter(log_format)
        handler.setFormatter(formatter)
        root_logger.addHandler(handler)
    else:
        for handler in root_logger.handlers:
            handler.setLevel(getattr(logging, log_level, logging.INFO))
            formatter = logging.Formatter(log_format)
            handler.setFormatter(formatter)

    redis_config = {
        "host": getattr(args, "redis_host", "localhost"),
        "port": getattr(args, "redis_port", 6379),
        "db": getattr(args, "redis_db", 0),
    }

    try:
        if args.command == "process":
            success = parse_file_with_gemini(
                xlsx_path=args.xlsx_file,
                enable_ai=getattr(args, "ai", False),
                async_processing=getattr(args, "async", False),
                redis_config=redis_config,
            )
            return 0 if success else 1

        elif args.command == "status":
            statuses = get_processing_status(args.tender_id, args.lot_ids, redis_config)
            print(json.dumps(statuses, ensure_ascii=False, indent=2))
            return 0

    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
