# app/parse_with_gemini.py

"""
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è parse.py —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini AI –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª parse.py, –¥–æ–±–∞–≤–ª—è—è:
1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å GeminiWorker –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–æ–≤
2. –ü–æ–¥–¥–µ—Ä–∂–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Redis
3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
"""

import argparse
import json
import logging
import os
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional

from app.workers import GeminiIntegration

from .gemini_module.logger import get_gemini_logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
from .parse import parse_file as original_parse_file

log = logging.getLogger(__name__)


def parse_file_with_gemini(xlsx_path: str, async_processing: bool = False, redis_config: Optional[Dict] = None) -> bool:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è parse_file —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Gemini AI.

    Args:
        xlsx_path: –ü—É—Ç—å –∫ XLSX —Ñ–∞–π–ª—É
        async_processing: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Redis
        redis_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis {host, port, db}

    Returns:
        True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    gemini_logger = get_gemini_logger()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini API
    api_key = os.getenv("GOOGLE_API_KEY")
    gemini_enabled = bool(api_key)

    if not gemini_enabled:
        gemini_logger.warning("‚ö†Ô∏è GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—é AI –æ–±—Ä–∞–±–æ—Ç–∫—É")

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É parse.py
    log.info("üîÑ –í—ã–ø–æ–ª–Ω—è—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")

    try:
        original_parse_file(xlsx_path)
        log.info("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return False

    # –ï—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–¥–µ—Å—å
    if not gemini_enabled:
        log.info("‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞")
        return True

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    source_path = Path(xlsx_path).resolve()
    output_dir = source_path.parent

    # –ò—â–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ñ–∞–π–ª
    json_files = list(output_dir.glob("*.json"))
    if not json_files:
        log.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return False

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π JSON (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ç–µ–Ω–¥–µ—Ä)
    tender_json_path = max(json_files, key=lambda p: p.stat().st_mtime)

    # –í—ã–ø–æ–ª–Ω—è–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É
    return process_tender_with_gemini(
        tender_json_path=tender_json_path, async_processing=async_processing, redis_config=redis_config
    )


def process_tender_with_gemini(
    tender_json_path: Path, async_processing: bool = False, redis_config: Optional[Dict] = None
) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–Ω–¥–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini AI.

    Args:
        tender_json_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Ç–µ–Ω–¥–µ—Ä–∞
        async_processing: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        redis_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis

    Returns:
        True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    gemini_logger = get_gemini_logger()

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞
        with open(tender_json_path, "r", encoding="utf-8") as f:
            tender_data = json.load(f)

        tender_id = extract_tender_id(tender_json_path, tender_data)
        gemini_logger.info(f"üß† –ù–∞—á–∏–Ω–∞—é AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        redis_client = None
        if async_processing:
            redis_config = redis_config or {}
            redis_client = GeminiIntegration.setup_redis_client(
                host=redis_config.get("host", "localhost"),
                port=redis_config.get("port", 6379),
                db=redis_config.get("db", 0),
            )

            if not redis_client:
                gemini_logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                async_processing = False

        integration = GeminiIntegration(redis_client=redis_client)

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è positions —Ñ–∞–π–ª–æ–≤
        lots_data = integration.create_positions_file_data(tender_id, tender_data)

        if not lots_data:
            gemini_logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–æ–≤ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return True

        gemini_logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(lots_data)} –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        if async_processing:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Redis
            success = integration.queue_tender_lots_async(tender_id, lots_data)

            if success:
                gemini_logger.info(f"‚úÖ –í—Å–µ {len(lots_data)} –ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å Redis")
                gemini_logger.info("‚ÑπÔ∏è –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ç—É—Å-–∫–æ–º–∞–Ω–¥—ã")
                return True
            else:
                gemini_logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –ª–æ—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å")
                return False
        else:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            gemini_logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é AI –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            results = integration.process_tender_lots_sync(tender_id, lots_data)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = sum(1 for r in results if r.get("status") == "completed")
            failed = len(results) - successful

            gemini_logger.info(f"üìà AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
            results_path = tender_json_path.parent / f"{tender_id}_gemini_results.json"
            with open(results_path, "w", encoding="utf-8") as f:
                json.dump(results, f, ensure_ascii=False, indent=2)

            gemini_logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_path.name}")

            return failed == 0

    except Exception as e:
        gemini_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return False


def extract_tender_id(json_path: Path, tender_data: Dict) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

    Args:
        json_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞

    Returns:
        ID —Ç–µ–Ω–¥–µ—Ä–∞
    """
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    tender_id = tender_data.get("tender_id") or tender_data.get("db_id")

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if not tender_id:
        tender_id = json_path.stem

    return str(tender_id)


def get_processing_status(tender_id: str, lot_ids: List[str], redis_config: Optional[Dict] = None) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞.

    Args:
        tender_id: ID —Ç–µ–Ω–¥–µ—Ä–∞
        lot_ids: –°–ø–∏—Å–æ–∫ ID –ª–æ—Ç–æ–≤
        redis_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ª–æ—Ç–æ–≤
    """
    redis_client = None
    if redis_config:
        redis_client = GeminiIntegration.setup_redis_client(
            host=redis_config.get("host", "localhost"),
            port=redis_config.get("port", 6379),
            db=redis_config.get("db", 0),
        )

    if not redis_client:
        return {"error": "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

    integration = GeminiIntegration(redis_client=redis_client)
    return integration.get_processing_status(tender_id, lot_ids)


def main():
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å Gemini"""
    parser = argparse.ArgumentParser(description="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ —Å Gemini AI")

    subparsers = parser.add_subparsers(dest="command", help="–ö–æ–º–∞–Ω–¥—ã")

    # –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    process_parser = subparsers.add_parser("process", help="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å XLSX —Ñ–∞–π–ª")
    process_parser.add_argument("xlsx_file", help="–ü—É—Ç—å –∫ XLSX —Ñ–∞–π–ª—É")
    process_parser.add_argument("--async", action="store_true", help="–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    process_parser.add_argument("--redis-host", default="localhost", help="–•–æ—Å—Ç Redis")
    process_parser.add_argument("--redis-port", type=int, default=6379, help="–ü–æ—Ä—Ç Redis")
    process_parser.add_argument("--redis-db", type=int, default=0, help="–ë–∞–∑–∞ Redis")

    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_parser = subparsers.add_parser("status", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    status_parser.add_argument("tender_id", help="ID —Ç–µ–Ω–¥–µ—Ä–∞")
    status_parser.add_argument("lot_ids", nargs="+", help="ID –ª–æ—Ç–æ–≤")
    status_parser.add_argument("--redis-host", default="localhost", help="–•–æ—Å—Ç Redis")
    status_parser.add_argument("--redis-port", type=int, default=6379, help="–ü–æ—Ä—Ç Redis")
    status_parser.add_argument("--redis-db", type=int, default=0, help="–ë–∞–∑–∞ Redis")

    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return 1

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        get_gemini_logger().setLevel(logging.DEBUG)

    redis_config = {
        "host": getattr(args, "redis_host", "localhost"),
        "port": getattr(args, "redis_port", 6379),
        "db": getattr(args, "redis_db", 0),
    }

    try:
        if args.command == "process":
            success = parse_file_with_gemini(
                xlsx_path=args.xlsx_file, async_processing=getattr(args, "async", False), redis_config=redis_config
            )
            return 0 if success else 1

        elif args.command == "status":
            statuses = get_processing_status(args.tender_id, args.lot_ids, redis_config)
            print(json.dumps(statuses, ensure_ascii=False, indent=2))
            return 0

    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
