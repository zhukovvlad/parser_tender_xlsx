#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import json
import time

import requests


def test_ai_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Celery"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery AI –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫—É
    with open("tenders_xlsx/42.xlsx", "rb") as f:
        files = {"file": ("42.xlsx", f, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")}
        response = requests.post("http://localhost:8000/parse-tender-ai/", files=files)

    if response.status_code == 202:
        task_info = response.json()
        task_id = task_info["task_id"]
        celery_task_id = task_info["celery_task_id"]
        print(f"üöÄ AI –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:")
        print(f"  Task ID: {task_id}")
        print(f"  Celery Task ID: {celery_task_id}")
        print(f'  –õ–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {task_info["lots_count"]}')
        print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Celery –∑–∞–¥–∞—á–∏
        for i in range(30):  # 60 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            status_response = requests.get(f"http://localhost:8000/celery-tasks/{celery_task_id}/status")
            if status_response.status_code == 200:
                status_data = status_response.json()
                state = status_data["state"]

                if state == "PENDING":
                    print(f"‚è≥ –°—Ç–∞—Ç—É—Å {i+1}: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...")
                elif state == "PROCESSING":
                    meta = status_data.get("result", {})
                    stage = meta.get("stage", "unknown")
                    progress = meta.get("progress", 0)
                    processed = meta.get("processed_lots", 0)
                    total = meta.get("total_lots", 0)
                    print(f"üîÑ –°—Ç–∞—Ç—É—Å {i+1}: {stage} - {progress}% ({processed}/{total})")
                elif state == "SUCCESS":
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    result = status_data.get("result", {})
                    if "batch_result" in result:
                        batch = result["batch_result"]
                        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã batch –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                        print(f'  –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {batch.get("total_lots", 0)}')
                        print(f'  –ó–∞–ø—É—â–µ–Ω–æ –∑–∞–¥–∞—á: {batch.get("dispatched_tasks", 0)}')
                        print(f'  –°—Ç–∞—Ç—É—Å: {batch.get("status", "unknown")}')
                        print(f'  –°–æ–æ–±—â–µ–Ω–∏–µ: {batch.get("message", "")}')

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –ø–æ–¥–∑–∞–¥–∞—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        subtask_ids = batch.get("subtask_ids", [])
                        if subtask_ids:
                            print(
                                f"  ID –ø–æ–¥–∑–∞–¥–∞—á: {subtask_ids[:3]}..."
                                if len(subtask_ids) > 3
                                else f"  ID –ø–æ–¥–∑–∞–¥–∞—á: {subtask_ids}"
                            )

                        # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if subtask_ids:
                            print(f"  üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                            print(f"     curl http://localhost:8000/celery-tasks/{subtask_ids[0]}/status")
                    break
                elif state == "FAILURE":
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                    error_info = status_data.get("result", {})
                    print(f'  –û—à–∏–±–∫–∞: {error_info.get("error", "Unknown error")}')
                    break
            else:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
            time.sleep(2)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
        print(response.text)


if __name__ == "__main__":
    test_ai_processing()
