#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import requests
import json
import time

def test_ai_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Celery"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery AI –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫—É
    with open('tenders_xlsx/42.xlsx', 'rb') as f:
        files = {'file': ('42.xlsx', f, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
        response = requests.post('http://localhost:8000/parse-tender-ai/', files=files)

    if response.status_code == 202:
        task_info = response.json()
        task_id = task_info['task_id']
        celery_task_id = task_info['celery_task_id']
        print(f'üöÄ AI –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:')
        print(f'  Task ID: {task_id}')
        print(f'  Celery Task ID: {celery_task_id}')
        print(f'  –õ–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {task_info["lots_count"]}')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Celery –∑–∞–¥–∞—á–∏
        for i in range(30):  # 60 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            status_response = requests.get(f'http://localhost:8000/celery-tasks/{celery_task_id}/status')
            if status_response.status_code == 200:
                status_data = status_response.json()
                state = status_data['state']
                
                if state == 'PENDING':
                    print(f'‚è≥ –°—Ç–∞—Ç—É—Å {i+1}: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...')
                elif state == 'PROCESSING':
                    meta = status_data.get('result', {})
                    stage = meta.get('stage', 'unknown')
                    progress = meta.get('progress', 0)
                    processed = meta.get('processed_lots', 0)
                    total = meta.get('total_lots', 0)
                    print(f'üîÑ –°—Ç–∞—Ç—É—Å {i+1}: {stage} - {progress}% ({processed}/{total})')
                elif state == 'SUCCESS':
                    print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
                    result = status_data.get('result', {})
                    if 'batch_result' in result:
                        batch = result['batch_result']
                        print(f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã batch –æ–±—Ä–∞–±–æ—Ç–∫–∏:')
                        print(f'  –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {batch.get("total_lots", 0)}')
                        print(f'  –£—Å–ø–µ—à–Ω–æ: {batch.get("successful_lots", 0)}')
                        print(f'  –û—à–∏–±–æ–∫: {batch.get("failed_lots", 0)}')
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–æ—Ç–∞
                        if batch.get('results'):
                            first_result = batch['results'][0]
                            if first_result.get('status') == 'success':
                                print(f'  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {first_result.get("category", "unknown")}')
                                ai_data = first_result.get('ai_data', {})
                                print(f'  –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: {len(ai_data)}')
                    break
                elif state == 'FAILURE':
                    print(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:')
                    error_info = status_data.get('result', {})
                    print(f'  –û—à–∏–±–∫–∞: {error_info.get("error", "Unknown error")}')
                    break
            else:
                print(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}')
            time.sleep(2)
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}')
        print(response.text)

if __name__ == "__main__":
    test_ai_processing()
